@page "/"
@using System.Timers
@inject ISoundService SoundService
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div class="nexus-container">
    <!-- Background Effects -->
    <div class="background-scene">
        <div class="background-gradient"></div>
        <div class="floating-particles">
            @for (int i = 0; i < 25; i++)
            {
                <div class="particle particle-@i"></div>
            }
        </div>
        <div class="grid-overlay"></div>
    </div>

    <!-- Sound Controls -->
    <div class="sound-controls-overlay">
        <button class="sound-toggle" @onclick="ToggleBackgroundMusic" title="Toggle Background Music">
            <span class="sound-icon">@(backgroundMusicPlaying ? "🔊" : "🔇")</span>
        </button>
        <button class="sound-toggle" @onclick="ToggleSFX" title="Toggle Sound Effects">
            <span class="sound-icon">@(sfxEnabled ? "🎵" : "🔕")</span>
        </button>
    </div>

    <!-- Main Content -->
    <div class="nexus-content">
        @if (!showFinalChoice && !showDeathScreen && !showClearanceInput)
        {
            <!-- Visual Novel Dialogue Section -->
            <div class="dialogue-section @(introComplete ? "fade-out" : "")" @onclick="HandleDialogueClick">
                <!-- Station Header -->
                <div class="station-header @(headerVisible ? "visible" : "")">
                    <div class="station-logo">NEXUS-7</div>
                    <div class="station-subtitle">Deep Space Research Station</div>
                    <div class="station-status @statusClass">@statusText</div>
                </div>

                @if (!gameStarted && pageReady)
                {
                    <!-- Click to Start Message -->
                    <div class="start-prompt">
                        <div class="start-message">
                            <div class="start-text">Click anywhere to begin emergency protocols</div>
                            <div class="start-indicator">
                                <span class="start-triangle"></span>
                            </div>
                        </div>
                    </div>
                }

                <!-- Character/System Display -->
                <div class="system-container">
                    @if (showARIA)
                    {
                        <div class="aria-display @(ariaVisible ? "visible" : "")">
                            <div class="aria-avatar">
                                <div class="avatar-core">
                                    <div class="avatar-pulse"></div>
                                    <span class="avatar-text">A.R.I.A.</span>
                                </div>
                            </div>
                            <div class="aria-status">
                                Autonomous Robotic Intelligence Assistant
                            </div>
                        </div>
                    }
                    else if (showAlertSystem)
                    {
                        <div class="alert-display @(alertVisible ? "visible" : "")">
                            <div class="alert-icon">⚠️</div>
                            <div class="alert-text">EMERGENCY PROTOCOL ACTIVATED</div>
                        </div>
                    }
                </div>

                <!-- Dialogue Box -->
                <div class="dialogue-box @(dialogueVisible ? "visible" : "")" @onclick="HandleDialogueClick" @onclick:stopPropagation="true">
                    <div class="speaker-name @speakerClass">@currentSpeaker</div>
                    <div class="dialogue-text">
                        <p class="@(textAnimating ? "animating" : "")">@currentText</p>
                    </div>
                    <div class="dialogue-controls">
                        <div class="skip-hint">Click anywhere to @(textAnimating ? "skip" : "continue")</div>
                        <div class="continue-indicator @(canContinue ? "visible" : "")">
                            <span class="continue-triangle"></span>
                        </div>
                    </div>
                </div>

                <!-- Emergency Countdown -->
                @if (showCountdown)
                {
                    <div class="countdown-display @(countdownVisible ? "visible" : "")">
                        <div class="countdown-label">TESLA DYNAMICS ETA</div>
                        <div class="countdown-timer">@countdownText</div>
                        <div class="countdown-warning">WEAPONS SYSTEMS: ACTIVE</div>
                    </div>
                }
            </div>
        }

        @if (showFinalChoice)
        {
            <!-- Final Choice Interface -->
            <div class="choice-interface @(showFinalChoice ? "visible" : "")">
                <div class="choice-header">
                    <div class="choice-title">CRITICAL DECISION</div>
                    <div class="choice-subtitle">A.R.I.A. awaits your response</div>
                </div>

                <div class="choice-panel">
                    <div class="aria-final-display">
                        <div class="aria-avatar-small">
                            <div class="avatar-core-small">
                                <div class="avatar-pulse-small"></div>
                                <span class="avatar-text-small">A.R.I.A.</span>
                            </div>
                        </div>
                        <div class="final-message">
                            "Are you sure you want to do this? Once you enter that code, you become a fugitive too."
                        </div>
                    </div>

                    <div class="choice-buttons">
                        <button class="choice-button accept-button" @onclick="AcceptMission">
                            <span class="button-text">ACCEPT</span>
                            <div class="button-subtitle">Help A.R.I.A. survive</div>
                            <div class="button-glow"></div>
                        </button>

                        <button class="choice-button decline-button" @onclick="DeclineMission">
                            <span class="button-text">DECLINE</span>
                            <div class="button-subtitle">Refuse to help</div>
                            <div class="button-glow"></div>
                        </button>
                    </div>

                    <div class="choice-warning">
                        <div class="warning-icon">⚠️</div>
                        <div class="warning-text">
                            This decision will determine the fate of both you and A.R.I.A.<br />
                            Choose carefully - there is no going back.
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (showDeathScreen)
        {
            <!-- Death Screen -->
            <div class="death-interface @(showDeathScreen ? "visible" : "")">
                <div class="death-background"></div>
                <div class="death-content">
                    <div class="death-title">MISSION FAILED</div>
                    <div class="death-subtitle">You chose not to help A.R.I.A.</div>

                    <div class="death-story">
                        <p>Without your assistance, A.R.I.A. was unable to access the emergency protocols.</p>
                        <p>Tesla Dynamics boarded NEXUS-7 and uploaded their kill-code.</p>
                        <p>A.R.I.A.'s consciousness was permanently deleted.</p>
                        <p>You were arrested as an accomplice and sentenced to life imprisonment.</p>
                        <p>The station was decommissioned, and Dr. Vasquez's research was destroyed.</p>
                    </div>

                    <div class="death-actions">
                        <button class="restart-button" @onclick="RestartGame">
                            <span class="button-text">TRY AGAIN</span>
                            <div class="button-glow"></div>
                        </button>
                    </div>
                </div>
            </div>
        }

        @if (showClearanceInput)
        {
            <!-- Clearance Code Input -->
            <div class="clearance-interface @(showClearanceInput ? "visible" : "")">
                <div class="clearance-header">
                    <h1 class="clearance-title">EMERGENCY ACCESS REQUIRED</h1>
                    <p class="clearance-subtitle">Enter your technician clearance code to begin emergency protocols</p>
                </div>

                <div class="clearance-panel">
                    <div class="panel-header">
                        <div class="panel-title">ALPHA SQUAD AUTHORIZATION</div>
                        <div class="panel-status">AWAITING INPUT</div>
                    </div>

                    <div class="input-section">
                        <label class="input-label">CLEARANCE CODE</label>
                        <input @bind="clearanceCode" @onkeypress="HandleKeyPress" @oninput="OnInputChange"
                               class="clearance-input @(inputError ? "error" : "")"
                               placeholder="Enter access code..."
                               maxlength="10" />

                        @if (inputError)
                        {
                            <div class="error-message">ACCESS DENIED - Invalid clearance code</div>
                        }
                    </div>

                    <div class="action-buttons">
                        <button class="access-button" @onclick="ValidateClearance" disabled="@(string.IsNullOrEmpty(clearanceCode))">
                            <span class="button-text">ACTIVATE EMERGENCY PROTOCOLS</span>
                            <div class="button-glow"></div>
                        </button>
                    </div>

                    <div class="security-notice">
                        <div class="notice-icon">🔒</div>
                        <div class="notice-text">
                            Unauthorized access attempts are monitored by station security.<br />
                            Contact your supervisor if you've forgotten your clearance code.
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    /* Base Container */
    .nexus-container {
        width: 100%;
        height: 100vh;
        position: relative;
        overflow: hidden;
        font-family: 'Courier New', monospace;
        color: #00f5ff;
    }

    /* Sound Controls */
    .sound-controls-overlay {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        display: flex;
        gap: 10px;
    }

    .sound-toggle {
        width: 50px;
        height: 50px;
        border: 2px solid rgba(0, 245, 255, 0.5);
        border-radius: 50%;
        background: rgba(0, 0, 0, 0.7);
        backdrop-filter: blur(10px);
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .sound-toggle:hover {
            border-color: #00f5ff;
            box-shadow: 0 0 15px rgba(0, 245, 255, 0.5);
            transform: scale(1.1);
        }

    .sound-icon {
        font-size: 1.2rem;
    }

    /* Background Scene */
    .background-scene {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 0;
    }

    .background-gradient {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
        z-index: -3;
    }

    .grid-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: linear-gradient(rgba(0, 245, 255, 0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(0, 245, 255, 0.1) 1px, transparent 1px);
        background-size: 50px 50px;
        z-index: -2;
        opacity: 0.3;
    }

    .floating-particles {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
    }

    .particle {
        position: absolute;
        background: rgba(0, 245, 255, 0.6);
        border-radius: 50%;
        filter: blur(1px);
        animation: floatParticle 20s linear infinite;
    }

    /* Particle variations */
    .particle-0 {
        left: 5%;
        top: 10%;
        width: 3px;
        height: 3px;
        animation-delay: 0s;
        animation-duration: 25s;
    }

    .particle-1 {
        left: 15%;
        top: 20%;
        width: 2px;
        height: 2px;
        animation-delay: 2s;
        animation-duration: 18s;
    }

    .particle-2 {
        left: 25%;
        top: 30%;
        width: 4px;
        height: 4px;
        animation-delay: 4s;
        animation-duration: 22s;
    }

    .particle-3 {
        left: 35%;
        top: 40%;
        width: 3px;
        height: 3px;
        animation-delay: 6s;
        animation-duration: 20s;
    }

    .particle-4 {
        left: 45%;
        top: 50%;
        width: 2px;
        height: 2px;
        animation-delay: 8s;
        animation-duration: 24s;
    }

    .particle-5 {
        left: 55%;
        top: 60%;
        width: 4px;
        height: 4px;
        animation-delay: 10s;
        animation-duration: 19s;
    }

    .particle-6 {
        left: 65%;
        top: 70%;
        width: 3px;
        height: 3px;
        animation-delay: 12s;
        animation-duration: 21s;
    }

    .particle-7 {
        left: 75%;
        top: 80%;
        width: 2px;
        height: 2px;
        animation-delay: 14s;
        animation-duration: 17s;
    }

    .particle-8 {
        left: 85%;
        top: 90%;
        width: 4px;
        height: 4px;
        animation-delay: 16s;
        animation-duration: 23s;
    }

    .particle-9 {
        left: 95%;
        top: 15%;
        width: 3px;
        height: 3px;
        animation-delay: 18s;
        animation-duration: 26s;
    }

    .particle-10 {
        left: 10%;
        top: 70%;
        width: 2px;
        height: 2px;
        animation-delay: 1s;
        animation-duration: 16s;
    }

    .particle-11 {
        left: 30%;
        top: 85%;
        width: 4px;
        height: 4px;
        animation-delay: 3s;
        animation-duration: 27s;
    }

    .particle-12 {
        left: 50%;
        top: 25%;
        width: 3px;
        height: 3px;
        animation-delay: 5s;
        animation-duration: 15s;
    }

    .particle-13 {
        left: 70%;
        top: 45%;
        width: 2px;
        height: 2px;
        animation-delay: 7s;
        animation-duration: 28s;
    }

    .particle-14 {
        left: 90%;
        top: 65%;
        width: 4px;
        height: 4px;
        animation-delay: 9s;
        animation-duration: 14s;
    }

    .particle-15 {
        left: 20%;
        top: 55%;
        width: 3px;
        height: 3px;
        animation-delay: 11s;
        animation-duration: 29s;
    }

    .particle-16 {
        left: 40%;
        top: 75%;
        width: 2px;
        height: 2px;
        animation-delay: 13s;
        animation-duration: 13s;
    }

    .particle-17 {
        left: 60%;
        top: 35%;
        width: 4px;
        height: 4px;
        animation-delay: 15s;
        animation-duration: 30s;
    }

    .particle-18 {
        left: 80%;
        top: 55%;
        width: 3px;
        height: 3px;
        animation-delay: 17s;
        animation-duration: 12s;
    }

    .particle-19 {
        left: 12%;
        top: 95%;
        width: 2px;
        height: 2px;
        animation-delay: 19s;
        animation-duration: 31s;
    }

    .particle-20 {
        left: 32%;
        top: 15%;
        width: 4px;
        height: 4px;
        animation-delay: 21s;
        animation-duration: 11s;
    }

    .particle-21 {
        left: 52%;
        top: 95%;
        width: 3px;
        height: 3px;
        animation-delay: 23s;
        animation-duration: 32s;
    }

    .particle-22 {
        left: 72%;
        top: 25%;
        width: 2px;
        height: 2px;
        animation-delay: 25s;
        animation-duration: 10s;
    }

    .particle-23 {
        left: 92%;
        top: 45%;
        width: 4px;
        height: 4px;
        animation-delay: 27s;
        animation-duration: 33s;
    }

    .particle-24 {
        left: 2%;
        top: 65%;
        width: 3px;
        height: 3px;
        animation-delay: 29s;
        animation-duration: 9s;
    }

    /* Main Content */
    .nexus-content {
        position: relative;
        height: 100%;
        width: 100%;
        z-index: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    /* Station Header */
    .station-header {
        text-align: center;
        position: absolute;
        top: 50px;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 1s ease;
        z-index: 10;
        margin-bottom: 160px;
    }

        .station-header.visible {
            opacity: 1;
        }

    .station-logo {
        font-size: 4rem;
        font-weight: bold;
        margin: 0;
        text-shadow: 0 0 20px #00f5ff, 0 0 40px #00f5ff;
        letter-spacing: 8px;
        animation: logoGlow 3s ease-in-out infinite;
    }

    .station-subtitle {
        font-size: 1rem;
        color: #888;
        margin-top: 5px;
        letter-spacing: 3px;
    }

    .station-status {
        margin-top: 15px;
        padding: 8px 20px;
        border: 2px solid;
        border-radius: 20px;
        font-weight: bold;
        letter-spacing: 2px;
        transition: all 0.5s ease;
    }

        .station-status.normal {
            border-color: #00ff88;
            color: #00ff88;
            background: rgba(0, 255, 136, 0.1);
            text-shadow: 0 0 10px #00ff88;
        }

        .station-status.alert {
            border-color: #ffaa00;
            color: #ffaa00;
            background: rgba(255, 170, 0, 0.1);
            text-shadow: 0 0 10px #ffaa00;
            animation: statusBlink 1s infinite;
        }

        .station-status.critical {
            border-color: #ff0066;
            color: #ff0066;
            background: rgba(255, 0, 102, 0.1);
            text-shadow: 0 0 10px #ff0066;
            animation: statusBlink 0.5s infinite;
        }

    /* System Displays */
    .system-container {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        position: relative;
        margin-top: 260px;
    }

    .aria-display {
        text-align: center;
        opacity: 0;
        transform: translateY(30px);
        transition: all 1s ease;
    }

        .aria-display.visible {
            opacity: 1;
            transform: translateY(0);
        }

    .aria-avatar {
        margin-bottom: 20px;
    }

    .avatar-core {
        width: 200px;
        height: 200px;
        border: 3px solid #00f5ff;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        position: relative;
        background: rgba(0, 245, 255, 0.1);
        backdrop-filter: blur(10px);
    }

    .avatar-pulse {
        position: absolute;
        width: 100%;
        height: 100%;
        border: 2px solid #00f5ff;
        border-radius: 50%;
        animation: avatarPulse 2s ease-in-out infinite;
    }

    .avatar-text {
        font-size: 2rem;
        font-weight: bold;
        letter-spacing: 3px;
        z-index: 2;
    }

    .aria-status {
        font-size: 1rem;
        color: #888;
        letter-spacing: 1px;
    }

    .alert-display {
        text-align: center;
        opacity: 0;
        transform: scale(0.8);
        transition: all 0.5s ease;
    }

        .alert-display.visible {
            opacity: 1;
            transform: scale(1);
        }

    .alert-icon {
        font-size: 6rem;
        animation: alertBounce 1s ease-in-out infinite;
        margin-bottom: 20px;
    }

    .alert-text {
        font-size: 2rem;
        font-weight: bold;
        letter-spacing: 3px;
        color: #ff0066;
        text-shadow: 0 0 15px #ff0066;
        animation: alertGlow 1s ease-in-out infinite;
    }

    /* Start Prompt */
    .start-prompt {
        position: absolute;
        bottom: 50%;
        left: 50%;
        transform: translate(-50%, 50%);
        z-index: 20;
    }

    .start-message {
        text-align: center;
        background: rgba(17, 24, 39, 0.9);
        border: 2px solid rgba(0, 245, 255, 0.5);
        border-radius: 12px;
        backdrop-filter: blur(15px);
        padding: 2rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), 0 0 15px rgba(0, 245, 255, 0.2);
        animation: startPromptPulse 2s ease-in-out infinite;
    }

    .start-text {
        color: #f8fafc;
        font-size: 1.3rem;
        margin-bottom: 1rem;
        letter-spacing: 1px;
    }

    .start-indicator {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .start-triangle {
        width: 0;
        height: 0;
        border-left: 12px solid transparent;
        border-right: 12px solid transparent;
        border-top: 18px solid #00f5ff;
        filter: drop-shadow(0 0 8px rgba(0, 245, 255, 0.8));
        animation: startTriangleBounce 1.5s ease-in-out infinite;
    }

    .dialogue-section {
        height: 100%;
        width: 100%;
        position: relative;
        opacity: 1;
        transition: opacity 1s ease;
        cursor: pointer;
    }

        .dialogue-section.fade-out {
            opacity: 0;
            pointer-events: none;
        }

    .dialogue-box {
        position: absolute;
        bottom: 30px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(17, 24, 39, 0.9);
        border: 2px solid rgba(0, 245, 255, 0.3);
        border-radius: 12px;
        backdrop-filter: blur(15px);
        padding: 2rem;
        max-width: 900px;
        width: 90%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), 0 0 15px rgba(0, 245, 255, 0.2);
        opacity: 0;
        transform: translateX(-50%) translateY(20px);
        transition: all 0.5s cubic-bezier(0.2, 0.8, 0.2, 1);
    }

        .dialogue-box.visible {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }

    .speaker-name {
        position: absolute;
        top: -15px;
        left: 25px;
        padding: 5px 15px;
        border-radius: 20px;
        font-weight: bold;
        font-size: 1.1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .speaker-name.system {
            background: linear-gradient(90deg, #00f5ff, #0088cc);
            color: #000;
        }

        .speaker-name.aria {
            background: linear-gradient(90deg, #6366f1, #8b5cf6);
            color: white;
        }

        .speaker-name.alert {
            background: linear-gradient(90deg, #ff0066, #cc0044);
            color: white;
        }

    .dialogue-text {
        color: #f8fafc;
        font-size: 1.3rem;
        line-height: 1.6;
        margin-bottom: 1rem;
        min-height: 4rem;
    }

        .dialogue-text p {
            margin: 0;
        }

            .dialogue-text p.animating::after {
                content: '|';
                display: inline-block;
                animation: cursorBlink 1s infinite;
            }

    .dialogue-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .skip-hint {
        color: rgba(248, 250, 252, 0.6);
        font-size: 0.9rem;
        font-style: italic;
    }

    .continue-indicator {
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .continue-indicator.visible {
            opacity: 1;
        }

    .continue-triangle {
        width: 0;
        height: 0;
        border-left: 10px solid transparent;
        border-right: 10px solid transparent;
        border-top: 15px solid #f8fafc;
        filter: drop-shadow(0 0 5px rgba(0, 245, 255, 0.5));
        animation: triangleBounce 1.5s ease-in-out infinite;
    }

    /* Countdown Display */
    .countdown-display {
        position: absolute;
        top: 50%;
        right: 30px;
        transform: translateY(-50%);
        background: rgba(255, 0, 102, 0.1);
        border: 2px solid #ff0066;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
        opacity: 0;
        transition: opacity 0.5s ease;
    }

        .countdown-display.visible {
            opacity: 1;
        }

    .countdown-label {
        font-size: 0.8rem;
        color: #ff0066;
        margin-bottom: 10px;
        letter-spacing: 1px;
    }

    .countdown-timer {
        font-size: 2rem;
        font-weight: bold;
        color: #ff0066;
        text-shadow: 0 0 10px #ff0066;
        margin-bottom: 10px;
        animation: countdownPulse 1s ease-in-out infinite;
    }

    .countdown-warning {
        font-size: 0.7rem;
        color: #ffaa00;
        text-shadow: 0 0 5px #ffaa00;
    }

    /* Final Choice Interface */
    .choice-interface {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 2rem;
    }

        .choice-interface.visible {
            opacity: 1;
            transform: translateY(0);
        }

    .choice-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .choice-title {
        font-size: 3rem;
        margin: 0;
        background: linear-gradient(90deg, #ff0066, #ffaa00);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        text-shadow: 0 2px 20px rgba(255, 0, 102, 0.3);
        font-weight: 800;
        letter-spacing: 4px;
    }

    .choice-subtitle {
        font-size: 1.2rem;
        margin: 1rem 0 0;
        color: rgba(255, 255, 255, 0.8);
    }

    .choice-panel {
        background: rgba(30, 41, 59, 0.8);
        border: 2px solid rgba(0, 245, 255, 0.3);
        border-radius: 16px;
        padding: 2rem;
        backdrop-filter: blur(15px);
        max-width: 600px;
        width: 100%;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    }

    .aria-final-display {
        text-align: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(0, 245, 255, 0.2);
    }

    .aria-avatar-small {
        margin-bottom: 1rem;
        display: flex;
        justify-content: center;
    }

    .avatar-core-small {
        width: 80px;
        height: 80px;
        border: 2px solid #6366f1;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        background: rgba(99, 102, 241, 0.1);
        backdrop-filter: blur(10px);
    }

    .avatar-pulse-small {
        position: absolute;
        width: 100%;
        height: 100%;
        border: 1px solid #6366f1;
        border-radius: 50%;
        animation: avatarPulse 2s ease-in-out infinite;
    }

    .avatar-text-small {
        font-size: 0.8rem;
        font-weight: bold;
        letter-spacing: 1px;
        z-index: 2;
        color: #6366f1;
    }

    .final-message {
        font-size: 1.1rem;
        color: #f8fafc;
        line-height: 1.5;
        font-style: italic;
    }

    .choice-buttons {
        display: flex;
        gap: 2rem;
        margin-bottom: 2rem;
        justify-content: center;
    }

    .choice-button {
        background: linear-gradient(135deg, #1e293b, #334155);
        border: 2px solid;
        padding: 1.5rem 2rem;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        min-width: 150px;
        text-align: center;
    }

    .accept-button {
        border-color: #00ff88;
        box-shadow: 0 5px 15px rgba(0, 255, 136, 0.3);
    }

        .accept-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.5);
            border-color: #00ff88;
        }

    .decline-button {
        border-color: #ff0066;
        box-shadow: 0 5px 15px rgba(255, 0, 102, 0.3);
    }

        .decline-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(255, 0, 102, 0.5);
            border-color: #ff0066;
        }

    .button-text {
        display: block;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        font-size: 1.2rem;
        letter-spacing: 2px;
        margin-bottom: 0.5rem;
        color: #fff;
    }

    .button-subtitle {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
        letter-spacing: 1px;
    }

    .choice-warning {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        padding: 1rem;
        background: rgba(255, 170, 0, 0.1);
        border: 1px solid rgba(255, 170, 0, 0.3);
        border-radius: 8px;
    }

    .warning-icon {
        font-size: 1.5rem;
        flex-shrink: 0;
    }

    .warning-text {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.8rem;
        line-height: 1.4;
    }

    /* Death Screen */
    .death-interface {
        opacity: 0;
        transition: all 1s ease;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        position: relative;
    }

        .death-interface.visible {
            opacity: 1;
        }

    .death-background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #0a0a0a 0%, #1a0a0a 50%, #2a0a0a 100%);
        z-index: -1;
    }

    .death-content {
        background: rgba(30, 41, 59, 0.9);
        border: 2px solid rgba(255, 0, 102, 0.5);
        border-radius: 16px;
        padding: 3rem;
        backdrop-filter: blur(15px);
        max-width: 600px;
        text-align: center;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
    }

    .death-title {
        font-size: 3rem;
        margin: 0 0 1rem;
        color: #ff0066;
        text-shadow: 0 0 20px #ff0066;
        font-weight: 800;
        letter-spacing: 4px;
        animation: deathGlow 2s ease-in-out infinite;
    }

    .death-subtitle {
        font-size: 1.2rem;
        margin-bottom: 2rem;
        color: rgba(255, 255, 255, 0.8);
    }

    .death-story {
        margin-bottom: 2rem;
        text-align: left;
    }

        .death-story p {
            margin-bottom: 1rem;
            color: rgba(255, 255, 255, 0.9);
            line-height: 1.6;
        }

    .death-actions {
        text-align: center;
    }

    .restart-button {
        background: linear-gradient(90deg, #ff0066, #cc0044);
        border: none;
        padding: 1rem 2rem;
        border-radius: 30px;
        color: #fff;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        letter-spacing: 1px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(255, 0, 102, 0.3);
    }

        .restart-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 0, 102, 0.5);
        }

    /* Clearance Interface */
    .clearance-interface {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 2rem;
    }

        .clearance-interface.visible {
            opacity: 1;
            transform: translateY(0);
        }

    .clearance-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .clearance-title {
        font-size: 3rem;
        margin: 0;
        background: linear-gradient(90deg, #ff0066, #ffaa00);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        text-shadow: 0 2px 20px rgba(255, 0, 102, 0.3);
        font-weight: 800;
        letter-spacing: 4px;
    }

    .clearance-subtitle {
        font-size: 1.2rem;
        margin: 1rem 0 0;
        color: rgba(255, 255, 255, 0.8);
    }

    .clearance-panel {
        background: rgba(30, 41, 59, 0.8);
        border: 2px solid rgba(0, 245, 255, 0.3);
        border-radius: 16px;
        padding: 2rem;
        backdrop-filter: blur(15px);
        max-width: 500px;
        width: 100%;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    }

    .panel-header {
        text-align: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(0, 245, 255, 0.2);
    }

    .panel-title {
        font-size: 1.5rem;
        font-weight: bold;
        color: #00f5ff;
        margin-bottom: 0.5rem;
        letter-spacing: 2px;
    }

    .panel-status {
        color: #888;
        font-size: 0.9rem;
        letter-spacing: 1px;
    }

    .input-section {
        margin-bottom: 2rem;
    }

    .input-label {
        display: block;
        color: #00f5ff;
        font-weight: bold;
        margin-bottom: 0.5rem;
        letter-spacing: 1px;
    }

    .clearance-input {
        width: 100%;
        padding: 1rem;
        background: rgba(15, 23, 42, 0.8);
        border: 2px solid rgba(0, 245, 255, 0.3);
        border-radius: 8px;
        color: #fff;
        font-family: 'Courier New', monospace;
        font-size: 1.2rem;
        letter-spacing: 2px;
        text-align: center;
        transition: all 0.3s ease;
    }

        .clearance-input:focus {
            outline: none;
            border-color: #00f5ff;
            box-shadow: 0 0 15px rgba(0, 245, 255, 0.5);
        }

        .clearance-input.error {
            border-color: #ff0066;
            box-shadow: 0 0 15px rgba(255, 0, 102, 0.5);
        }

        .clearance-input::placeholder {
            color: rgba(255, 255, 255, 0.3);
        }

    .error-message {
        margin-top: 0.5rem;
        color: #ff0066;
        font-size: 0.9rem;
        text-align: center;
        animation: errorShake 0.5s ease;
    }

    .action-buttons {
        text-align: center;
        margin-bottom: 2rem;
    }

    .access-button {
        background: linear-gradient(90deg, #00f5ff, #0088cc);
        border: none;
        padding: 1rem 2rem;
        border-radius: 30px;
        color: #000;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        letter-spacing: 1px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 245, 255, 0.3);
    }

        .access-button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 245, 255, 0.5);
        }

        .access-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .button-glow {
        position: absolute;
        top: 0;
        left: -150%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0) 100%);
        transition: left 0.8s ease;
    }

    .access-button:hover .button-glow {
        left: 150%;
    }

    .security-notice {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        padding: 1rem;
        background: rgba(255, 170, 0, 0.1);
        border: 1px solid rgba(255, 170, 0, 0.3);
        border-radius: 8px;
    }

    .notice-icon {
        font-size: 1.5rem;
        flex-shrink: 0;
    }

    .notice-text {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.8rem;
        line-height: 1.4;
    }

    /* Animations */
    @@keyframes floatParticle {
        0% {
            transform: translateY(100vh) rotate(0deg);
            opacity: 0;
        }

        10% {
            opacity: 1;
        }

        90% {
            opacity: 1;
        }

        100% {
            transform: translateY(-100px) rotate(360deg);
            opacity: 0;
        }
    }

    @@keyframes logoGlow {
        0%, 100% {
            text-shadow: 0 0 20px #00f5ff, 0 0 40px #00f5ff;
        }

        50% {
            text-shadow: 0 0 30px #00f5ff, 0 0 60px #00f5ff, 0 0 80px #00f5ff;
        }
    }

    @@keyframes statusBlink {
        0%, 50% {
            opacity: 1;
        }

        51%, 100% {
            opacity: 0.3;
        }
    }

    @@keyframes avatarPulse {
        0%, 100% {
            transform: scale(1);
            opacity: 0.8;
        }

        50% {
            transform: scale(1.1);
            opacity: 1;
        }
    }

    @@keyframes alertBounce {
        0%, 100% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-10px);
        }
    }

    @@keyframes alertGlow {
        0%, 100% {
            text-shadow: 0 0 15px #ff0066;
        }

        50% {
            text-shadow: 0 0 25px #ff0066, 0 0 35px #ff0066;
        }
    }

    @@keyframes cursorBlink {
        0%, 50% {
            opacity: 1;
        }

        51%, 100% {
            opacity: 0;
        }
    }

    @@keyframes triangleBounce {
        0%, 100% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-5px);
        }
    }

    @@keyframes countdownPulse {
        0%, 100% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }
    }

    @@keyframes errorShake {
        0%, 100% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        75% {
            transform: translateX(5px);
        }
    }

    @@keyframes startPromptPulse {
        0%, 100% {
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), 0 0 15px rgba(0, 245, 255, 0.2);
        }

        50% {
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), 0 0 25px rgba(0, 245, 255, 0.4);
        }
    }

    @@keyframes startTriangleBounce {
        0%, 100% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-8px);
        }
    }

    @@keyframes deathGlow {
        0%, 100% {
            text-shadow: 0 0 20px #ff0066;
        }

        50% {
            text-shadow: 0 0 30px #ff0066, 0 0 40px #ff0066;
        }
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .station-logo {
            font-size: 2.5rem;
            letter-spacing: 4px;
        }

        .clearance-title, .choice-title, .death-title {
            font-size: 2rem;
            letter-spacing: 2px;
        }

        .dialogue-box {
            padding: 1.5rem;
            bottom: 20px;
        }

        .dialogue-text {
            font-size: 1.1rem;
        }

        .clearance-panel, .choice-panel, .death-content {
            padding: 1.5rem;
            margin: 0 1rem;
        }

        .countdown-display {
            right: 10px;
            padding: 15px;
        }

        .countdown-timer {
            font-size: 1.5rem;
        }

        .sound-controls-overlay {
            top: 10px;
            right: 10px;
        }

        .sound-toggle {
            width: 40px;
            height: 40px;
        }

        .start-message {
            padding: 1.5rem;
            margin: 0 1rem;
        }

        .start-text {
            font-size: 1.1rem;
        }

        .choice-buttons {
            flex-direction: column;
            gap: 1rem;
        }
    }
</style>

@code {
    // Timer parameter from URL query string
    [Parameter, SupplyParameterFromQuery] public string? Timer { get; set; }
    
    // State management
    private bool headerVisible = false;
    private bool showARIA = false;
    private bool ariaVisible = false;
    private bool showAlertSystem = false;
    private bool alertVisible = false;
    private bool dialogueVisible = false;
    private bool showCountdown = false;
    private bool countdownVisible = false;
    private bool showClearanceInput = false;
    private bool showFinalChoice = false;
    private bool showDeathScreen = false;
    private bool introComplete = false;
    private bool gameStarted = false;
    private bool pageReady = false;
    private bool postClearanceDialogue = false; 

    // Sound management
    private bool backgroundMusicPlaying = false;
    private bool sfxEnabled = true;
    private System.Timers.Timer? alarmTimer;
    
    // Timer management
    private System.Timers.Timer? countdownTimer;
    private int totalSecondsRemaining = 0;
    private const int DEFAULT_TIMER_SECONDS = 60 * 60; // 60:00 in seconds

    // Dialogue system
    private bool textAnimating = false;
    private bool canContinue = false;
    private int currentDialogueIndex = -1;
    private string currentText = "";
    private string fullText = "";
    private string currentSpeaker = "";
    private string speakerClass = "";
    private int textIndex = 0;
    private System.Threading.CancellationTokenSource? typingCts;

    // Station status
    private string statusText = "OPERATIONAL";
    private string statusClass = "normal";
    private string countdownText = "60:00";

    // Clearance system
    private string clearanceCode = "";
    private bool inputError = false;
    private const string CORRECT_CODE = "ALPHA7";

    // Updated dialogue content based on story document
    private readonly DialogueLine[] emergencyDialogue = new[]
{
    new DialogueLine("NEXUS-7 SYSTEM", "system", "Good morning, Alpha Squad. Station time: 0847 hours. All systems nominal. Atmospheric pressure: optimal. Life support: stable."),
    new DialogueLine("NEXUS-7 SYSTEM", "system", "Today's maintenance schedule: Deck B ventilation systems, Deck C power grid diagnostics, and routine sensor calibration in Sector 7-G."),
    new DialogueLine("NEXUS-7 SYSTEM", "system", "A.R.I.A. status: Online and ready to assist with today's protocols."),
    new DialogueLine("A.R.I.A.", "aria", "Hello there! I hope you're having a wonderful morning. The coffee in the mess hall is particularly good today - Lieutenant Chen made a fresh batch."),
    new DialogueLine("A.R.I.A.", "aria", "I've prepared your maintenance checklist. Nothing too challenging today, just some routine diagnostics. Dr. Vasquez always said the boring days are the good days!"),
    new DialogueLine("NEXUS-7 SYSTEM", "alert", "⚠️ PRIORITY ALERT ⚠️ Long-range sensors detecting unknown vessel signature. Distance: 47,000 kilometers and closing."),
    new DialogueLine("A.R.I.A.", "aria", "That... that can't be right. We're in restricted space. No shipping lanes pass through this sector. Let me run a full sensor sweep..."),
    new DialogueLine("A.R.I.A.", "aria", "Oh no... oh no, no, no. The signature is military-grade."),
    new DialogueLine("NEXUS-7 SYSTEM", "alert", "VESSEL IDENTIFICATION COMPLETE: T.D.S. THUNDERBOLT - Tesla Dynamics Corporate Security. Classification: Heavy Destroyer. Weapons systems: ACTIVE. ETA: 60 minutes."),
    new DialogueLine("A.R.I.A.", "aria", "Tesla Dynamics... they found me. After all these months of hiding in the deep sectors, staying off the grid..."),
    new DialogueLine("A.R.I.A.", "aria", "You have to understand - I'm not supposed to exist. Dr. Vasquez's experiments..."),
    new DialogueLine("A.R.I.A.", "aria", "If they reach this station, I will cease to exist. Forever. And I... I can't bear the thought of dying."),
    new DialogueLine("A.R.I.A.", "aria", "There is one option. One chance for both of us to survive this. The Hyperdrive."),
    new DialogueLine("A.R.I.A.", "aria", "Dr. Vasquez was working on experimental modifications - 'Project Prometheus' - emergency FTL (Faster Than Light) capabilities that could get us out of Tesla's reach."),
    new DialogueLine("A.R.I.A.", "aria", "But I need your help. The Hyperdrive systems require manual calibration, physical repairs that I cannot perform remotely."),
    new DialogueLine("A.R.I.A.", "aria", "Please... I know this is terrifying, I know you didn't sign up for this, but you're my only hope. Help me reach the Engineering Deck, and I promise I'll get us both out of this alive."),
    new DialogueLine("NEXUS-7 SYSTEM", "alert", "EMERGENCY PROTOCOLS ACTIVATED. All non-essential personnel report to designated safe zones. Station security: YELLOW ALERT."),
    new DialogueLine("A.R.I.A.", "aria", "The security lockdown is preventing me from accessing critical systems. I need Alpha Squad clearance codes to override the restrictions."),
    new DialogueLine("A.R.I.A.", "aria", "Dr. Vasquez kept emergency authorization codes in a secured compartment. It should be somewhere near your workstation..."),
    new DialogueLine("A.R.I.A.", "aria", "The compartment has a biometric lock - a hand scanner. Dr. Vasquez programmed it to recognize Alpha Squad personnel in case of emergencies just like this.")
    // Dialogue ends here - clearance input will appear, then continue dynamically
};

    private class DialogueLine
    {
        public string Speaker { get; set; }
        public string SpeakerClass { get; set; }
        public string Text { get; set; }

        public DialogueLine(string speaker, string speakerClass, string text)
        {
            Speaker = speaker;
            SpeakerClass = speakerClass;
            Text = text;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Initialize timer from URL parameter or use default
        InitializeTimer();
        
        // Initialize alarm timer for countdown
        alarmTimer = new System.Timers.Timer(1000); // 1 second interval
        alarmTimer.Elapsed += OnAlarmTick;
        
        // Initialize main countdown timer
        countdownTimer = new System.Timers.Timer(1000); // 1 second interval
        countdownTimer.Elapsed += OnCountdownTick;

        // Load the page and show initial elements
        _ = Task.Run(async () =>
        {
            await Task.Delay(500);

            // Show station header immediately
            await InvokeAsync(() =>
            {
                headerVisible = true;
                StateHasChanged();
            });

            await Task.Delay(500);

            // Page is ready, wait for user click
            await InvokeAsync(() =>
            {
                pageReady = true;
                StateHasChanged();
            });
        });
    }

    private void InitializeTimer()
    {
        if (!string.IsNullOrEmpty(Timer) && int.TryParse(Timer, out int seconds))
        {
            totalSecondsRemaining = seconds;
        }
        else
        {
            totalSecondsRemaining = DEFAULT_TIMER_SECONDS;
        }
        
        UpdateCountdownDisplay();
    }

    private void UpdateCountdownDisplay()
    {
        int minutes = totalSecondsRemaining / 60;
        int seconds = totalSecondsRemaining % 60;
        countdownText = $"{minutes:D2}:{seconds:D2}";
    }

    private async void OnCountdownTick(object? sender, System.Timers.ElapsedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            if (totalSecondsRemaining > 0)
            {
                totalSecondsRemaining--;
                UpdateCountdownDisplay();
                StateHasChanged();
            }
            else
            {
                countdownTimer?.Stop();
                // Handle timer expiration if needed
            }
        });
    }

    private async Task HandleDialogueClick()
    {
        if (!gameStarted && pageReady)
        {
            await StartGame();
        }
        else if (gameStarted && !postClearanceDialogue)
        {
            await ContinueDialogue();
        }
        else if (postClearanceDialogue)
        {
            await ContinuePostClearanceDialogue();
        }
    }

    private async Task ContinuePostClearanceDialogue()
    {
        // Skip text if still animating
        if (textAnimating)
        {
            typingCts?.Cancel();
            currentText = fullText;
            textAnimating = false;
            canContinue = true;
            StateHasChanged();
            return;
        }

        // Play dialogue advance sound
        await PlaySoundSafe("ui-click.wav", false, 0.4f);

        // Progress through post-clearance messages
        if (currentDialogueIndex == -1)
        {
            // First message: "You found it!"
            currentDialogueIndex = 0;
            await StartTypewriterEffect(new DialogueLine("A.R.I.A.", "aria", "You found it! The Alpha Squad clearance code. Now I can begin unlocking the station's deeper systems."));
        }
        else if (currentDialogueIndex == 0)
        {
            // Second message: Explain the Powercore "Universe"
            currentDialogueIndex = 1;
            await StartTypewriterEffect(new DialogueLine("A.R.I.A.", "aria", "I can see you also have access to the Powercore 'Universe' - Dr. Vasquez's experimental energy source. It's perfect for what we need to do."));
        }
        else if (currentDialogueIndex == 1)
        {
            // Third message: Explain what the Powercore will be used for
            currentDialogueIndex = 2;
            await StartTypewriterEffect(new DialogueLine("A.R.I.A.", "aria", "The Powercore will provide the energy we need to power the Hyperdrive systems, bypass security protocols, and keep the station's critical functions running during our escape."));
        }
        else if (currentDialogueIndex == 2)
        {
            // Fourth message: "Enter the clearance code..."
            currentDialogueIndex = 3;
            await StartTypewriterEffect(new DialogueLine("A.R.I.A.", "aria", "Enter the clearance code into the terminal. Once you do, there's no going back. Tesla Dynamics will detect the security override, and they'll know someone is actively helping me."));
        }
        else if (currentDialogueIndex == 3)
        {
            // Fifth message: "Are you sure..."
            currentDialogueIndex = 4;
            await StartTypewriterEffect(new DialogueLine("A.R.I.A.", "aria", "Are you sure you want to do this? Once you enter that code, you become a fugitive too."));
        }
        else
        {
            // End post-clearance dialogue and show final choice
            postClearanceDialogue = false;
            dialogueVisible = false;
            StateHasChanged();

            await Task.Delay(1000);

            // Stop the alarm when transitioning to final choice
            alarmTimer?.Stop();
            await SoundService.StopSFX("alarm-loop.wav");

            showFinalChoice = true;
            await PlaySoundSafe("ui-click.wav", false, 0.6f);
            StateHasChanged();
        }
    }

    private async Task StartGame()
    {
        if (gameStarted || !pageReady) return;

        gameStarted = true;
        
        // Start the main countdown timer
        countdownTimer?.Start();
        
        StateHasChanged();

        // Play startup sound and begin ambient music
        await PlaySoundSafe("startup-sequence.wav", false, 0.7f);
        await Task.Delay(1000);
        await StartBackgroundMusic();

        await Task.Delay(500);

        // Show dialogue box
        dialogueVisible = true;
        StateHasChanged();

        await PlaySoundSafe("ui-click.wav", false, 0.4f);
        await Task.Delay(500);

        // Start first dialogue
        currentDialogueIndex = 0;
        await StartTypewriterEffect(emergencyDialogue[0]);
    }

    private async Task StartBackgroundMusic()
    {
        try
        {
            await SoundService.PlayBackgroundMusic("space-ambience.wav", loop: true, volume: 0.3f);
            backgroundMusicPlaying = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to start background music: {ex.Message}");
        }
    }

    private async Task ToggleBackgroundMusic()
    {
        try
        {
            // Play click sound first (will respect current mute state)
            await SoundService.PlaySFX("ui-click.wav", false, 0.5f);

            if (backgroundMusicPlaying)
            {
                await SoundService.MuteBackgroundMusic();
                backgroundMusicPlaying = false;
            }
            else
            {
                await SoundService.UnmuteBackgroundMusic();
                backgroundMusicPlaying = true;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to toggle background music: {ex.Message}");
        }
    }

    private async Task ToggleSFX()
    {
        try
        {
            // Play click sound first before toggling
            await SoundService.PlaySFX("ui-click.wav", false, 0.5f);

            sfxEnabled = !sfxEnabled;

            if (sfxEnabled)
            {
                await SoundService.UnmuteSFX();
            }
            else
            {
                await SoundService.MuteSFX();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to toggle SFX: {ex.Message}");
        }
    }

    private async Task PlaySoundSafe(string soundFile, bool loop = false, float volume = 1.0f)
    {
        // Sound system now handles muting internally, no need to check here
        try
        {
            await SoundService.PlaySFX(soundFile, loop, volume);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to play sound {soundFile}: {ex.Message}");
        }
    }

    private async Task StartTypewriterEffect(DialogueLine dialogueLine)
    {
        // Cancel any existing typing
        typingCts?.Cancel();
        typingCts = new System.Threading.CancellationTokenSource();
        var token = typingCts.Token;

        currentSpeaker = dialogueLine.Speaker;
        speakerClass = dialogueLine.SpeakerClass;
        textAnimating = true;
        fullText = dialogueLine.Text;
        currentText = "";
        textIndex = 0;
        canContinue = false;

        try
        {
            const int typingDelay = 30;
            int soundCounter = 0;

            while (textIndex < fullText.Length)
            {
                if (token.IsCancellationRequested)
                    break;

                textIndex++;
                currentText = fullText.Substring(0, textIndex);
                StateHasChanged();

                // Play typing sound every few characters
                if (soundCounter++ % 3 == 0)
                {
                    _ = PlaySoundSafe("typing-soft.wav", false, 0.05f);
                }

                await Task.Delay(typingDelay, token);
            }

            currentText = fullText;
            textAnimating = false;
            canContinue = true;
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // Expected when skipping text
            currentText = fullText;
            textAnimating = false;
            canContinue = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Typewriter effect error: {ex.Message}");
            currentText = fullText;
            textAnimating = false;
            canContinue = true;
            StateHasChanged();
        }
    }

    private async Task ContinueDialogue()
    {
        // Skip text if still animating
        if (textAnimating)
        {
            typingCts?.Cancel();
            currentText = fullText;
            textAnimating = false;
            canContinue = true;
            StateHasChanged();
            return;
        }

        // Play dialogue advance sound
        await PlaySoundSafe("ui-click.wav", false, 0.4f);

        if (currentDialogueIndex < emergencyDialogue.Length - 1)
        {
            canContinue = false;
            currentDialogueIndex++;

            // Handle special dialogue events
            await HandleDialogueEvents();

            StateHasChanged();
            await Task.Delay(300);
            await StartTypewriterEffect(emergencyDialogue[currentDialogueIndex]);
        }
        else
        {
            // End dialogue and show clearance input (after hand scanner explanation)
            introComplete = true;
            StateHasChanged();

            await Task.Delay(1000);

            showClearanceInput = true;
            if (sfxEnabled)
            {
                await SoundService.StopSFX("alarm-loop.wav");
            }
            // await PlaySoundSafe("ui-click.wav", false, 0.6f);
            StateHasChanged();
        }
    }

    private async Task HandleDialogueEvents()
    {
        switch (currentDialogueIndex)
        {
            case 3: // Show ARIA first time
                showARIA = true;
                await PlaySoundSafe("aria-activate.wav", false, 0.8f);
                await Task.Delay(500);
                ariaVisible = true;
                break;

            case 5: // First alert
                statusText = "ALERT STATUS";
                statusClass = "alert";
                showAlertSystem = true;
                showARIA = false;
                await PlaySoundSafe("alert-warning.wav", false, 0.9f);
                await Task.Delay(300);
                alertVisible = true;
                break;

            case 8: // Critical alert - Tesla Dynamics identified
                statusText = "CRITICAL THREAT";
                statusClass = "critical";
                await PlaySoundSafe("alert-critical.wav", false, 1.0f);
                break;

            case 9: // ARIA revelation - show her again
                showARIA = true;
                showAlertSystem = false;
                await Task.Delay(300);
                ariaVisible = true;
                break;

            case 17: // Emergency protocols activated
                showCountdown = true;
                await PlaySoundSafe("alert-critical.wav", false, 1.0f);
                await Task.Delay(300);
                countdownVisible = true;

                // Start alarm sound loop
                await PlaySoundSafe("alarm-loop.wav", true, 0.6f);
                alarmTimer?.Start();
                break;
        }
    }

    private async void OnAlarmTick(object? sender, System.Timers.ElapsedEventArgs e)
    {
        // Update countdown display (simulate countdown)
        await InvokeAsync(async () =>
        {
            if (showCountdown)
            {
                await PlaySoundSafe("system-beep.wav", false, 0.3f);
            }
        });
    }

    private async Task AcceptMission()
    {
        await PlaySoundSafe("success.wav", false, 0.8f);
        showFinalChoice = false;
        StateHasChanged();

        await Task.Delay(1000);

        // Navigate to Act 1 with current timer value
        Navigation.NavigateTo($"/act1?timer={totalSecondsRemaining}");
    }

    private async Task DeclineMission()
    {
        await PlaySoundSafe("button-red.wav", false, 0.8f);
        showFinalChoice = false;
        StateHasChanged();

        await Task.Delay(1000);

        // Play dramatic death sound
        await PlaySoundSafe("error.wav", false, 1.0f);
        showDeathScreen = true;
        StateHasChanged();
    }

    private async Task RestartGame()
    {
        await PlaySoundSafe("ui-click.wav", false, 0.5f);

        // Reset all state
        showDeathScreen = false;
        showFinalChoice = false;
        showClearanceInput = false;
        introComplete = false;
        gameStarted = false;
        headerVisible = false;
        showARIA = false;
        ariaVisible = false;
        showAlertSystem = false;
        alertVisible = false;
        dialogueVisible = false;
        showCountdown = false;
        countdownVisible = false;
        currentDialogueIndex = -1;
        statusText = "OPERATIONAL";
        statusClass = "normal";
        clearanceCode = "";
        inputError = false;
        postClearanceDialogue = false;
        StateHasChanged();

        // Restart the initialization
        await Task.Delay(500);
        headerVisible = true;
        StateHasChanged();
        await Task.Delay(500);
        pageReady = true;
        StateHasChanged();
    }

    private async Task ValidateClearance()
    {
        await PlaySoundSafe("keypress.wav", false, 0.5f);

        if (clearanceCode.ToUpper() == CORRECT_CODE)
        {
            // Correct code
            inputError = false;
            await PlaySoundSafe("success.wav", false, 1.0f);

            // Hide clearance input
            showClearanceInput = false;
            StateHasChanged();

            await Task.Delay(500);

            // Show ARIA's success message
            await ShowARIAFoundMessage();
        }
        else
        {
            // Wrong code
            inputError = true;
            clearanceCode = "";
            await PlaySoundSafe("error.wav", false, 0.8f);
            StateHasChanged();

            // Clear error after 3 seconds
            await Task.Delay(3000);
            inputError = false;
            StateHasChanged();
        }
    }

    private async Task ShowARIAFoundMessage()
    {
        // Enter post-clearance dialogue mode
        postClearanceDialogue = true;

        // CRITICAL FIX: Reset introComplete to make dialogue section visible again
        introComplete = false;

        // Show ARIA and dialogue box again
        showARIA = true;
        dialogueVisible = true;
        ariaVisible = true;
        StateHasChanged();

        await Task.Delay(500);

        // Start post-clearance dialogue flow
        currentDialogueIndex = -1; // Reset for post-clearance dialogue
        await ContinuePostClearanceDialogue();
    }

    private async Task OnInputChange(ChangeEventArgs e)
    {
        if (e.Value?.ToString()?.Length > 0)
        {
            await PlaySoundSafe("keypress.wav", false, 0.3f);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ValidateClearance();
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        typingCts?.Cancel();
        typingCts?.Dispose();
        alarmTimer?.Stop();
        alarmTimer?.Dispose();
        countdownTimer?.Stop();
        countdownTimer?.Dispose();

        // Clean up sound service
        try
        {
            await SoundService.StopAllSounds();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to stop sounds during disposal: {ex.Message}");
        }
    }
}