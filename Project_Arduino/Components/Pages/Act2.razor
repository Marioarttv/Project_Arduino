@page "/act2"
@using System.Timers
@inject ISoundService SoundService
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div class="nexus-container">
    <!-- Background Effects -->
    <div class="background-scene">
        <div class="background-gradient"></div>
        <div class="floating-particles">
            @for (int i = 0; i < 25; i++)
            {
                <div class="particle particle-@i"></div>
            }
        </div>
        <div class="grid-overlay"></div>
    </div>

    <!-- Sound Controls -->
    <div class="sound-controls-overlay">
        <button class="sound-toggle" @onclick="ToggleBackgroundMusic" title="Toggle Background Music">
            <span class="sound-icon">@(backgroundMusicPlaying ? "🔊" : "🔇")</span>
        </button>
        <button class="sound-toggle" @onclick="ToggleSFX" title="Toggle Sound Effects">
            <span class="sound-icon">@(sfxEnabled ? "🎵" : "🔕")</span>
        </button>
    </div>

    <!-- Main Content -->
    <div class="nexus-content">
        @if (!showMorseInterface && !showSuccessOverlay)
        {
            <!-- Dialogue Section -->
            <div class="dialogue-section @(dialogueSectionVisible ? "visible" : "")" @onclick="HandleDialogueClick">
                <!-- Act Header -->
                <div class="act-header @(headerVisible ? "visible" : "")">
                    <div class="act-logo">ACT 2: THE DESCENT</div>
                    <div class="act-subtitle">Communications Array - Dr. Vasquez's Message</div>
                    <div class="countdown-status @countdownClass">
                        <div class="countdown-label">TESLA DYNAMICS ETA</div>
                        <div class="countdown-time">@countdownText</div>
                    </div>
                </div>

                <!-- ARIA Display -->
                <div class="system-container">
                    <div class="aria-display @(ariaVisible ? "visible" : "")">
                        <div class="aria-avatar">
                            <div class="avatar-core">
                                <div class="avatar-pulse"></div>
                                <span class="avatar-text">A.R.I.A.</span>
                            </div>
                        </div>
                        <div class="aria-status">
                            Communications Array - Signal Analysis
                        </div>
                    </div>
                </div>

                <!-- Dialogue Box -->
                <div class="dialogue-box @(dialogueVisible ? "visible" : "")" @onclick:stopPropagation="true">
                    <div class="speaker-name aria">@currentSpeaker</div>
                    <div class="dialogue-text">
                        <p class="@(textAnimating ? "animating" : "")">@currentText</p>
                    </div>
                    <div class="dialogue-controls">
                        <div class="skip-hint">Click anywhere to @(textAnimating ? "skip" : "continue")</div>
                        <div class="continue-indicator @(canContinue ? "visible" : "")">
                            <span class="continue-triangle"></span>
                        </div>
                    </div>
                </div>

                <!-- Proceed to Morse Code Button -->
                @if (dialogueComplete)
                {
                    <div class="dialogue-complete-actions">
                        <button class="proceed-button final-proceed" @onclick="ShowMorseInterface">
                            <span class="button-text">ACCESS MORSE CODE DECODER</span>
                            <div class="button-subtitle">Translate Dr. Vasquez's Final Message</div>
                            <div class="button-glow"></div>
                        </button>
                    </div>
                }
            </div>
        }

        @if (showMorseInterface)
        {
            <!-- Morse Code Interface -->
            <div class="morse-interface @(showMorseInterface ? "visible" : "")">
                <div class="morse-header">
                    <div class="morse-title">DR. VASQUEZ'S EMERGENCY TRANSMISSION</div>
                    <div class="morse-subtitle">Morse Code Signal Detected - Translation Required</div>
                </div>

                <div class="morse-content">
                    <!-- Signal Status Panel -->
                    <div class="signal-panel">
                        <div class="signal-header">
                            <div class="signal-title">SIGNAL STATUS</div>
                            <div class="signal-frequency">Emergency Frequency 447.2 MHz</div>
                        </div>
                        <div class="signal-info">
                            <div class="info-row">
                                <span class="info-label">Signal Strength:</span>
                                <span class="info-value">@signalStrength%</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Transmission Type:</span>
                                <span class="info-value">Morse Code (Loop)</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Source:</span>
                                <span class="info-value">Dr. Elena Vasquez</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Hardware Status:</span>
                                <span class="info-value">Arduino Ready</span>
                            </div>
                        </div>
                    </div>

                    <!-- Morse Code Reference -->
                    <div class="morse-reference">
                        <div class="reference-header">
                            <div class="reference-title">MORSE CODE REFERENCE</div>
                            <div class="reference-subtitle">• = DOT (short) — = DASH (long)</div>
                        </div>
                        <div class="morse-chart">
                            <div class="morse-grid">
                                <div class="morse-item"><span class="letter">A</span><span class="code">•—</span></div>
                                <div class="morse-item"><span class="letter">B</span><span class="code">—•••</span></div>
                                <div class="morse-item"><span class="letter">C</span><span class="code">—•—•</span></div>
                                <div class="morse-item"><span class="letter">D</span><span class="code">—••</span></div>
                                <div class="morse-item"><span class="letter">E</span><span class="code">•</span></div>
                                <div class="morse-item"><span class="letter">F</span><span class="code">••—•</span></div>
                                <div class="morse-item"><span class="letter">G</span><span class="code">——•</span></div>
                                <div class="morse-item"><span class="letter">H</span><span class="code">••••</span></div>
                                <div class="morse-item"><span class="letter">I</span><span class="code">••</span></div>
                                <div class="morse-item"><span class="letter">J</span><span class="code">•———</span></div>
                                <div class="morse-item"><span class="letter">K</span><span class="code">—•—</span></div>
                                <div class="morse-item"><span class="letter">L</span><span class="code">•—••</span></div>
                                <div class="morse-item"><span class="letter">M</span><span class="code">——</span></div>
                                <div class="morse-item"><span class="letter">N</span><span class="code">—•</span></div>
                                <div class="morse-item"><span class="letter">O</span><span class="code">———</span></div>
                                <div class="morse-item"><span class="letter">P</span><span class="code">•——•</span></div>
                                <div class="morse-item"><span class="letter">Q</span><span class="code">——•—</span></div>
                                <div class="morse-item"><span class="letter">R</span><span class="code">•—•</span></div>
                                <div class="morse-item"><span class="letter">S</span><span class="code">•••</span></div>
                                <div class="morse-item"><span class="letter">T</span><span class="code">—</span></div>
                                <div class="morse-item"><span class="letter">U</span><span class="code">••—</span></div>
                                <div class="morse-item"><span class="letter">V</span><span class="code">•••—</span></div>
                                <div class="morse-item"><span class="letter">W</span><span class="code">•——</span></div>
                                <div class="morse-item"><span class="letter">X</span><span class="code">—••—</span></div>
                                <div class="morse-item"><span class="letter">Y</span><span class="code">—•——</span></div>
                                <div class="morse-item"><span class="letter">Z</span><span class="code">——••</span></div>
                            </div>
                        </div>
                    </div>

                    <!-- Arduino Instruction Panel -->
                    <div class="arduino-panel">
                        <div class="arduino-header">
                            <div class="arduino-title">HARDWARE INTERFACE</div>
                            <div class="arduino-subtitle">Physical Arduino Module Required</div>
                        </div>
                        <div class="arduino-instructions">
                            <div class="instruction-item">
                                <div class="instruction-icon">🔧</div>
                                <div class="instruction-text">
                                    <strong>Step 1:</strong> Activate the Arduino morse code transmitter
                                </div>
                            </div>
                            <div class="instruction-item">
                                <div class="instruction-icon">👂</div>
                                <div class="instruction-text">
                                    <strong>Step 2:</strong> Listen carefully to the dot-dash pattern
                                </div>
                            </div>
                            <div class="instruction-item">
                                <div class="instruction-icon">📝</div>
                                <div class="instruction-text">
                                    <strong>Step 3:</strong> Use the reference chart to decode each letter
                                </div>
                            </div>
                            <div class="instruction-item">
                                <div class="instruction-icon">✉️</div>
                                <div class="instruction-text">
                                    <strong>Step 4:</strong> Enter the complete message below
                                </div>
                            </div>
                        </div>
                        <div class="hardware-status">
                            <div class="status-indicator ready">
                                <div class="status-dot"></div>
                                <span>AWAITING ARDUINO ACTIVATION</span>
                            </div>
                        </div>
                    </div>

                    <!-- Translation Input -->
                    <div class="translation-panel">
                        <div class="translation-header">
                            <div class="translation-title">MESSAGE TRANSLATION</div>
                            <div class="translation-subtitle">Enter the decoded message exactly as transmitted</div>
                        </div>
                        <div class="input-section">
                            <label class="input-label">DECODED MESSAGE</label>
                            <textarea @bind="translationInput" @oninput="OnTranslationChange"
                                      class="translation-input @(inputError ? "error" : "")"
                                      placeholder="Enter decoded morse code message here..."
                                      rows="3"></textarea>

                            @if (inputError)
                            {
                                <div class="error-message">TRANSLATION INCORRECT - Please verify and try again</div>
                            }

                            @if (showHint)
                            {
                                <div class="hint-message">
                                    <div class="hint-icon">💡</div>
                                    <div class="hint-text">
                                        Hint: The message contains 4 parts separated by "STOP". Each part is a complete phrase.
                                        Listen carefully for the word breaks and punctuation signals.
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="translation-actions">
                            <button class="decode-button" @onclick="ValidateTranslation"
                                    disabled="@(string.IsNullOrWhiteSpace(translationInput))">
                                <span class="button-text">SUBMIT TRANSLATION</span>
                                <div class="button-glow"></div>
                            </button>

                            <button class="hint-button" @onclick="ShowHint" disabled="@showHint">
                                <span class="button-text">REQUEST HINT</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (showSuccessOverlay)
        {
            <!-- Success and Emotional Revelation -->
            <div class="success-overlay @(showSuccessOverlay ? "visible" : "")">
                <div class="success-content">
                    <!-- Success Header -->
                    <div class="success-header">
                        <div class="success-icon">✓</div>
                        <div class="success-title">TRANSMISSION DECODED</div>
                        <div class="success-subtitle">Dr. Vasquez's final message revealed</div>
                    </div>

                    <!-- Message Display -->
                    <div class="decoded-message">
                        <div class="message-header">DECODED MESSAGE:</div>
                        <div class="message-content">
                            "ARIA DAUGHTER STOP HYPERDRIVE CORE NEEDS MANUAL OVERRIDE STOP MY OFFICE HOLDS THE KEY STOP LIVE FOR BOTH OF US STOP"
                        </div>
                    </div>

                    <!-- ARIA's Emotional Response -->
                    <div class="aria-response">
                        <div class="aria-avatar-small">
                            <div class="avatar-core-small">
                                <div class="avatar-pulse-small"></div>
                                <span class="avatar-text-small">A.R.I.A.</span>
                            </div>
                        </div>
                        <div class="emotional-text">
                            <p class="emotion-line">"Daughter... he called me his daughter."</p>
                            <p class="emotion-line">"I always wondered why he cared so much about my development..."</p>
                            <p class="emotion-line">"His office holds the key to the Hyperdrive override."</p>
                            <p class="emotion-line">"'Live for both of us...' - He knew this day would come."</p>
                        </div>
                    </div>

                    <!-- Mission Update -->
                    <div class="mission-update">
                        <div class="update-header">MISSION OBJECTIVES UPDATED</div>
                        <div class="objectives-list">
                            <div class="objective completed">✓ Bypass Security Office A-2</div>
                            <div class="objective completed">✓ Decode Dr. Vasquez's transmission</div>
                            <div class="objective active">→ Locate Research Lab B-1 (Dr. Vasquez's Office)</div>
                            <div class="objective pending">○ Find Hyperdrive override key</div>
                            <div class="objective pending">○ Reach Engineering Deck C</div>
                        </div>
                    </div>

                    <!-- Continue Button -->
                    <div class="continue-actions">
                        <button class="continue-mission-button" @onclick="ContinueToNextAct">
                            <span class="button-text">PROCEED TO DR. VASQUEZ'S OFFICE</span>
                            <div class="button-subtitle">Research Lab B-1 - Find the Override Key</div>
                            <div class="button-glow"></div>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    /* Base Container */
    .nexus-container {
        width: 100%;
        height: 100vh;
        position: relative;
        overflow: hidden;
        font-family: 'Courier New', monospace;
        color: #00f5ff;
    }

    /* Sound Controls */
    .sound-controls-overlay {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        display: flex;
        gap: 10px;
    }

    .sound-toggle {
        width: 50px;
        height: 50px;
        border: 2px solid rgba(0, 245, 255, 0.5);
        border-radius: 50%;
        background: rgba(0, 0, 0, 0.7);
        backdrop-filter: blur(10px);
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .sound-toggle:hover {
            border-color: #00f5ff;
            box-shadow: 0 0 15px rgba(0, 245, 255, 0.5);
            transform: scale(1.1);
        }

    .sound-icon {
        font-size: 1.2rem;
    }

    /* Background Scene */
    .background-scene {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 0;
    }

    .background-gradient {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
        z-index: -3;
    }

    .grid-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: linear-gradient(rgba(0, 245, 255, 0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(0, 245, 255, 0.1) 1px, transparent 1px);
        background-size: 50px 50px;
        z-index: -2;
        opacity: 0.3;
    }

    .floating-particles {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
    }

    .particle {
        position: absolute;
        background: rgba(0, 245, 255, 0.6);
        border-radius: 50%;
        filter: blur(1px);
        animation: floatParticle 20s linear infinite;
    }

    /* Particle variations - same as other pages */
    .particle-0 {
        left: 5%;
        top: 10%;
        width: 3px;
        height: 3px;
        animation-delay: 0s;
        animation-duration: 25s;
    }

    .particle-1 {
        left: 15%;
        top: 20%;
        width: 2px;
        height: 2px;
        animation-delay: 2s;
        animation-duration: 18s;
    }

    .particle-2 {
        left: 25%;
        top: 30%;
        width: 4px;
        height: 4px;
        animation-delay: 4s;
        animation-duration: 22s;
    }

    .particle-3 {
        left: 35%;
        top: 40%;
        width: 3px;
        height: 3px;
        animation-delay: 6s;
        animation-duration: 20s;
    }

    .particle-4 {
        left: 45%;
        top: 50%;
        width: 2px;
        height: 2px;
        animation-delay: 8s;
        animation-duration: 24s;
    }

    .particle-5 {
        left: 55%;
        top: 60%;
        width: 4px;
        height: 4px;
        animation-delay: 10s;
        animation-duration: 19s;
    }

    .particle-6 {
        left: 65%;
        top: 70%;
        width: 3px;
        height: 3px;
        animation-delay: 12s;
        animation-duration: 21s;
    }

    .particle-7 {
        left: 75%;
        top: 80%;
        width: 2px;
        height: 2px;
        animation-delay: 14s;
        animation-duration: 17s;
    }

    .particle-8 {
        left: 85%;
        top: 90%;
        width: 4px;
        height: 4px;
        animation-delay: 16s;
        animation-duration: 23s;
    }

    .particle-9 {
        left: 95%;
        top: 15%;
        width: 3px;
        height: 3px;
        animation-delay: 18s;
        animation-duration: 26s;
    }

    .particle-10 {
        left: 10%;
        top: 70%;
        width: 2px;
        height: 2px;
        animation-delay: 1s;
        animation-duration: 16s;
    }

    .particle-11 {
        left: 30%;
        top: 85%;
        width: 4px;
        height: 4px;
        animation-delay: 3s;
        animation-duration: 27s;
    }

    .particle-12 {
        left: 50%;
        top: 25%;
        width: 3px;
        height: 3px;
        animation-delay: 5s;
        animation-duration: 15s;
    }

    .particle-13 {
        left: 70%;
        top: 45%;
        width: 2px;
        height: 2px;
        animation-delay: 7s;
        animation-duration: 28s;
    }

    .particle-14 {
        left: 90%;
        top: 65%;
        width: 4px;
        height: 4px;
        animation-delay: 9s;
        animation-duration: 14s;
    }

    .particle-15 {
        left: 20%;
        top: 55%;
        width: 3px;
        height: 3px;
        animation-delay: 11s;
        animation-duration: 29s;
    }

    .particle-16 {
        left: 40%;
        top: 75%;
        width: 2px;
        height: 2px;
        animation-delay: 13s;
        animation-duration: 13s;
    }

    .particle-17 {
        left: 60%;
        top: 35%;
        width: 4px;
        height: 4px;
        animation-delay: 15s;
        animation-duration: 30s;
    }

    .particle-18 {
        left: 80%;
        top: 55%;
        width: 3px;
        height: 3px;
        animation-delay: 17s;
        animation-duration: 12s;
    }

    .particle-19 {
        left: 12%;
        top: 95%;
        width: 2px;
        height: 2px;
        animation-delay: 19s;
        animation-duration: 31s;
    }

    .particle-20 {
        left: 32%;
        top: 15%;
        width: 4px;
        height: 4px;
        animation-delay: 21s;
        animation-duration: 11s;
    }

    .particle-21 {
        left: 52%;
        top: 95%;
        width: 3px;
        height: 3px;
        animation-delay: 23s;
        animation-duration: 32s;
    }

    .particle-22 {
        left: 72%;
        top: 25%;
        width: 2px;
        height: 2px;
        animation-delay: 25s;
        animation-duration: 10s;
    }

    .particle-23 {
        left: 92%;
        top: 45%;
        width: 4px;
        height: 4px;
        animation-delay: 27s;
        animation-duration: 33s;
    }

    .particle-24 {
        left: 2%;
        top: 65%;
        width: 3px;
        height: 3px;
        animation-delay: 29s;
        animation-duration: 9s;
    }

    /* Main Content */
    .nexus-content {
        position: relative;
        height: 100%;
        width: 100%;
        z-index: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    /* Act Header */
    .act-header {
        text-align: center;
        position: absolute;
        top: 30px;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 1s ease;
        z-index: 10;
    }

        .act-header.visible {
            opacity: 1;
        }

    .act-logo {
        font-size: 2.5rem;
        font-weight: bold;
        margin: 0;
        background: linear-gradient(90deg, #00f5ff, #6366f1);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        text-shadow: 0 0 20px rgba(0, 245, 255, 0.5);
        letter-spacing: 4px;
        animation: logoGlow 3s ease-in-out infinite;
    }

    .act-subtitle {
        font-size: 0.9rem;
        color: #888;
        margin-top: 5px;
        letter-spacing: 2px;
    }

    .countdown-status {
        margin-top: 15px;
        padding: 8px 15px;
        border: 2px solid #ff0066;
        border-radius: 20px;
        background: rgba(255, 0, 102, 0.1);
        display: inline-block;
    }

    .countdown-label {
        font-size: 0.7rem;
        color: #ff0066;
        margin-bottom: 2px;
    }

    .countdown-time {
        font-size: 1.1rem;
        font-weight: bold;
        color: #ff0066;
        text-shadow: 0 0 10px #ff0066;
    }

    /* System Container */
    .system-container {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        position: relative;
        margin-top: 200px;
    }

    .aria-display {
        text-align: center;
        opacity: 0;
        transform: translateY(30px);
        transition: all 1s ease;
    }

        .aria-display.visible {
            opacity: 1;
            transform: translateY(0);
        }

    .aria-avatar {
        margin-bottom: 20px;
    }

    .avatar-core {
        width: 200px;
        height: 200px;
        border: 3px solid #6366f1;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        position: relative;
        background: rgba(99, 102, 241, 0.1);
        backdrop-filter: blur(10px);
    }

    .avatar-pulse {
        position: absolute;
        width: 100%;
        height: 100%;
        border: 2px solid #6366f1;
        border-radius: 50%;
        animation: avatarPulse 2s ease-in-out infinite;
    }

    .avatar-text {
        font-size: 2rem;
        font-weight: bold;
        letter-spacing: 3px;
        z-index: 2;
        color: #6366f1;
    }

    .aria-status {
        font-size: 0.9rem;
        color: #888;
        letter-spacing: 1px;
    }

    /* Dialogue Section */
    .dialogue-section {
        height: 100%;
        width: 100%;
        position: relative;
        cursor: pointer;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.6s ease;
    }

        .dialogue-section.visible {
            opacity: 1;
            transform: translateY(0);
        }

    .dialogue-box {
        position: absolute;
        bottom: 30px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(17, 24, 39, 0.9);
        border: 2px solid rgba(99, 102, 241, 0.3);
        border-radius: 12px;
        backdrop-filter: blur(15px);
        padding: 2rem;
        max-width: 900px;
        width: 90%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), 0 0 15px rgba(99, 102, 241, 0.2);
        opacity: 0;
        transform: translateX(-50%) translateY(20px);
        transition: all 0.5s cubic-bezier(0.2, 0.8, 0.2, 1);
    }

        .dialogue-box.visible {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }

    .speaker-name {
        position: absolute;
        top: -15px;
        left: 25px;
        padding: 5px 15px;
        border-radius: 20px;
        font-weight: bold;
        font-size: 1.1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .speaker-name.aria {
            background: linear-gradient(90deg, #6366f1, #8b5cf6);
            color: white;
        }

    .dialogue-text {
        color: #f8fafc;
        font-size: 1.3rem;
        line-height: 1.6;
        margin-bottom: 1rem;
        min-height: 4rem;
    }

        .dialogue-text p {
            margin: 0;
        }

            .dialogue-text p.animating::after {
                content: '|';
                display: inline-block;
                animation: cursorBlink 1s infinite;
            }

    .dialogue-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .skip-hint {
        color: rgba(248, 250, 252, 0.6);
        font-size: 0.9rem;
        font-style: italic;
    }

    .continue-indicator {
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .continue-indicator.visible {
            opacity: 1;
        }

    .continue-triangle {
        width: 0;
        height: 0;
        border-left: 10px solid transparent;
        border-right: 10px solid transparent;
        border-top: 15px solid #f8fafc;
        filter: drop-shadow(0 0 5px rgba(99, 102, 241, 0.5));
        animation: triangleBounce 1.5s ease-in-out infinite;
    }

    /* Dialogue Complete Actions */
    .dialogue-complete-actions {
        position: absolute;
        bottom: 120px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 15;
        opacity: 0;
        animation: fadeInUp 0.8s ease forwards;
    }

    .final-proceed {
        background: linear-gradient(135deg, #1e293b, #334155);
        border: 2px solid #00ff88;
        padding: 1.2rem 2rem;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 255, 136, 0.3);
    }

        .final-proceed:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.5);
        }

    .proceed-button {
        background: linear-gradient(135deg, #1e293b, #334155);
        border: 2px solid #00ff88;
        padding: 1.5rem 2.5rem;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 255, 136, 0.3);
    }

        .proceed-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.5);
        }

    .button-text {
        display: block;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        font-size: 1.2rem;
        letter-spacing: 2px;
        margin-bottom: 0.5rem;
        color: #fff;
    }

    .button-subtitle {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
        letter-spacing: 1px;
    }

    .button-glow {
        position: absolute;
        top: 0;
        left: -150%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0) 100%);
        transition: left 0.8s ease;
    }

    .proceed-button:hover .button-glow {
        left: 150%;
    }

    /* Morse Code Interface */
    .morse-interface {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s ease;
        height: 100vh;
        overflow-y: auto;
        padding: 2rem;
    }

        .morse-interface.visible {
            opacity: 1;
            transform: translateY(0);
        }

    .morse-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .morse-title {
        font-size: 2.5rem;
        margin: 0;
        background: linear-gradient(90deg, #00f5ff, #6366f1);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        font-weight: 800;
        letter-spacing: 3px;
    }

    .morse-subtitle {
        font-size: 1rem;
        margin: 0.5rem 0 0;
        color: rgba(255, 255, 255, 0.8);
    }

    .morse-content {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    /* Signal Panel */
    .signal-panel {
        background: rgba(30, 41, 59, 0.8);
        border: 2px solid rgba(0, 245, 255, 0.3);
        border-radius: 16px;
        padding: 1.5rem;
        backdrop-filter: blur(15px);
        grid-column: 1 / -1;
        margin-bottom: 1rem;
    }

    .signal-header {
        text-align: center;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid rgba(0, 245, 255, 0.2);
    }

    .signal-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: #00f5ff;
        letter-spacing: 1px;
    }

    .signal-frequency {
        font-size: 0.9rem;
        color: #888;
        margin-top: 0.5rem;
    }

    .signal-info {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    .info-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 6px;
    }

    .info-label {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.9rem;
    }

    .info-value {
        color: #fff;
        font-weight: bold;
        font-size: 0.9rem;
    }

    /* Morse Reference */
    .morse-reference {
        background: rgba(30, 41, 59, 0.8);
        border: 2px solid rgba(0, 245, 255, 0.3);
        border-radius: 16px;
        padding: 1.5rem;
        backdrop-filter: blur(15px);
    }

    .reference-header {
        text-align: center;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid rgba(0, 245, 255, 0.2);
    }

    .reference-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: #00f5ff;
        letter-spacing: 1px;
    }

    .reference-subtitle {
        font-size: 0.8rem;
        color: #888;
        margin-top: 0.5rem;
    }

    .morse-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
        gap: 0.5rem;
    }

    .morse-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 0.5rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 6px;
        text-align: center;
    }

    .letter {
        font-weight: bold;
        font-size: 1rem;
        color: #00f5ff;
        margin-bottom: 0.2rem;
    }

    .code {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.8);
        font-family: monospace;
    }

    /* Arduino Panel */
    .arduino-panel {
        background: rgba(30, 41, 59, 0.8);
        border: 2px solid rgba(0, 245, 255, 0.3);
        border-radius: 16px;
        padding: 1.5rem;
        backdrop-filter: blur(15px);
    }

    .arduino-header {
        text-align: center;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid rgba(0, 245, 255, 0.2);
    }

    .arduino-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: #00f5ff;
        letter-spacing: 1px;
    }

    .arduino-subtitle {
        font-size: 0.8rem;
        color: #888;
        margin-top: 0.5rem;
    }

    .arduino-instructions {
        margin-bottom: 1rem;
    }

    .instruction-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.8rem;
        margin-bottom: 0.5rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 8px;
        border-left: 3px solid #00f5ff;
    }

    .instruction-icon {
        font-size: 1.2rem;
        flex-shrink: 0;
    }

    .instruction-text {
        color: #f8fafc;
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .hardware-status {
        text-align: center;
        padding: 1rem;
        background: rgba(0, 245, 255, 0.1);
        border-radius: 8px;
        border: 1px solid rgba(0, 245, 255, 0.3);
    }

    .status-indicator {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        font-weight: bold;
    }

    .status-dot {
        width: 10px;
        height: 10px;
        border-radius: 50%;
    }

    .status-indicator.playing .status-dot {
        background: #00ff88;
        animation: statusPulse 1s ease-in-out infinite;
    }

    .status-indicator.ready .status-dot {
        background: #888;
    }

    /* Translation Panel */
    .translation-panel {
        background: rgba(30, 41, 59, 0.8);
        border: 2px solid rgba(0, 245, 255, 0.3);
        border-radius: 16px;
        padding: 1.5rem;
        backdrop-filter: blur(15px);
        grid-column: 1 / -1;
    }

    .translation-header {
        text-align: center;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid rgba(0, 245, 255, 0.2);
    }

    .translation-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: #00f5ff;
        letter-spacing: 1px;
    }

    .translation-subtitle {
        font-size: 0.8rem;
        color: #888;
        margin-top: 0.5rem;
    }

    .input-section {
        margin-bottom: 2rem;
    }

    .input-label {
        display: block;
        color: #00f5ff;
        font-weight: bold;
        margin-bottom: 0.5rem;
        letter-spacing: 1px;
    }

    .translation-input {
        width: 100%;
        padding: 1rem;
        background: rgba(15, 23, 42, 0.8);
        border: 2px solid rgba(0, 245, 255, 0.3);
        border-radius: 8px;
        color: #fff;
        font-family: 'Courier New', monospace;
        font-size: 1rem;
        letter-spacing: 1px;
        transition: all 0.3s ease;
        resize: vertical;
    }

        .translation-input:focus {
            outline: none;
            border-color: #00f5ff;
            box-shadow: 0 0 15px rgba(0, 245, 255, 0.5);
        }

        .translation-input.error {
            border-color: #ff0066;
            box-shadow: 0 0 15px rgba(255, 0, 102, 0.5);
        }

        .translation-input::placeholder {
            color: rgba(255, 255, 255, 0.3);
        }

    .error-message {
        margin-top: 0.5rem;
        color: #ff0066;
        font-size: 0.9rem;
        text-align: center;
        animation: errorShake 0.5s ease;
    }

    .hint-message {
        margin-top: 1rem;
        padding: 1rem;
        background: rgba(255, 170, 0, 0.1);
        border: 1px solid rgba(255, 170, 0, 0.3);
        border-radius: 8px;
        display: flex;
        align-items: flex-start;
        gap: 1rem;
    }

    .hint-icon {
        font-size: 1.5rem;
        flex-shrink: 0;
    }

    .hint-text {
        color: rgba(255, 255, 255, 0.8);
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .translation-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

    .decode-button {
        background: linear-gradient(135deg, #00ff88, #00cc66);
        border: none;
        padding: 1rem 2rem;
        border-radius: 30px;
        color: #000;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        letter-spacing: 1px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 255, 136, 0.3);
    }

        .decode-button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.5);
        }

        .decode-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .hint-button {
        background: linear-gradient(135deg, #ffaa00, #ff8800);
        border: none;
        padding: 1rem 2rem;
        border-radius: 30px;
        color: #000;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        letter-spacing: 1px;
        box-shadow: 0 5px 15px rgba(255, 170, 0, 0.3);
    }

        .hint-button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 170, 0, 0.5);
        }

        .hint-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    /* Success Overlay */
    .success-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.8s ease;
        overflow-y: auto;
        padding: 2rem;
    }

        .success-overlay.visible {
            opacity: 1;
        }

    .success-content {
        background: linear-gradient(135deg, rgba(0, 255, 136, 0.1), rgba(0, 245, 255, 0.1));
        border: 2px solid #00ff88;
        border-radius: 20px;
        backdrop-filter: blur(20px);
        padding: 2rem;
        max-width: 800px;
        width: 100%;
        text-align: center;
        max-height: 90vh;
        overflow-y: auto;
    }

    .success-header {
        margin-bottom: 2rem;
    }

    .success-icon {
        font-size: 3rem;
        color: #00ff88;
        margin-bottom: 1rem;
        text-shadow: 0 0 20px #00ff88;
        animation: successPulse 2s ease-in-out infinite;
    }

    .success-title {
        font-size: 2rem;
        font-weight: bold;
        color: #00ff88;
        margin-bottom: 0.5rem;
        letter-spacing: 2px;
    }

    .success-subtitle {
        font-size: 1rem;
        color: #888;
        letter-spacing: 1px;
    }

    .decoded-message {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 12px;
        border: 1px solid rgba(0, 245, 255, 0.3);
    }

    .message-header {
        font-weight: bold;
        color: #00f5ff;
        margin-bottom: 1rem;
        font-size: 1.1rem;
        letter-spacing: 1px;
    }

    .message-content {
        font-size: 1.1rem;
        color: #fff;
        line-height: 1.5;
        font-style: italic;
    }

    .aria-response {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: rgba(99, 102, 241, 0.1);
        border-radius: 12px;
        border: 1px solid rgba(99, 102, 241, 0.3);
    }

    .aria-avatar-small {
        display: flex;
        justify-content: center;
        margin-bottom: 1rem;
    }

    .avatar-core-small {
        width: 60px;
        height: 60px;
        border: 2px solid #6366f1;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        background: rgba(99, 102, 241, 0.1);
        backdrop-filter: blur(10px);
    }

    .avatar-pulse-small {
        position: absolute;
        width: 100%;
        height: 100%;
        border: 1px solid #6366f1;
        border-radius: 50%;
        animation: avatarPulse 2s ease-in-out infinite;
    }

    .avatar-text-small {
        font-size: 0.7rem;
        font-weight: bold;
        letter-spacing: 1px;
        z-index: 2;
        color: #6366f1;
    }

    .emotional-text {
        text-align: left;
    }

    .emotion-line {
        margin-bottom: 0.8rem;
        color: #f8fafc;
        font-size: 1rem;
        line-height: 1.4;
        font-style: italic;
    }

    .mission-update {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 12px;
        border: 1px solid rgba(0, 245, 255, 0.3);
    }

    .update-header {
        font-weight: bold;
        color: #00f5ff;
        margin-bottom: 1rem;
        font-size: 1.1rem;
        letter-spacing: 1px;
        text-align: center;
    }

    .objectives-list {
        text-align: left;
    }

    .objective {
        padding: 0.5rem 0;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .objective.completed {
            color: #00ff88;
        }

        .objective.active {
            color: #00f5ff;
            font-weight: bold;
        }

        .objective.pending {
            color: #888;
        }

    .continue-actions {
        text-align: center;
    }

    .continue-mission-button {
        background: linear-gradient(135deg, #00ff88, #00cc66);
        border: none;
        padding: 1.5rem 2.5rem;
        border-radius: 30px;
        color: #000;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        letter-spacing: 1px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 255, 136, 0.4);
        animation: missionButtonPulse 2s ease-in-out infinite;
    }

        .continue-mission-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.6);
        }

    /* Animations */
    @@keyframes floatParticle {
        0% {
            transform: translateY(100vh) rotate(0deg);
            opacity: 0;
        }

        10% {
            opacity: 1;
        }

        90% {
            opacity: 1;
        }

        100% {
            transform: translateY(-100px) rotate(360deg);
            opacity: 0;
        }
    }

    @@keyframes logoGlow {
        0%, 100% {
            text-shadow: 0 0 20px rgba(0, 245, 255, 0.5);
        }

        50% {
            text-shadow: 0 0 30px rgba(0, 245, 255, 0.8), 0 0 40px rgba(99, 102, 241, 0.3);
        }
    }

    @@keyframes avatarPulse {
        0%, 100% {
            transform: scale(1);
            opacity: 0.8;
        }

        50% {
            transform: scale(1.1);
            opacity: 1;
        }
    }

    @@keyframes cursorBlink {
        0%, 50% {
            opacity: 1;
        }

        51%, 100% {
            opacity: 0;
        }
    }

    @@keyframes triangleBounce {
        0%, 100% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-5px);
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }

    @@keyframes statusPulse {
        0%, 100% {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }
    }

    @@keyframes errorShake {
        0%, 100% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        75% {
            transform: translateX(5px);
        }
    }

    @@keyframes successPulse {
        0%, 100% {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(1.1);
            opacity: 0.8;
        }
    }

    @@keyframes missionButtonPulse {
        0%, 100% {
            box-shadow: 0 5px 15px rgba(0, 255, 136, 0.4);
        }

        50% {
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.7);
        }
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .act-logo {
            font-size: 1.8rem;
            letter-spacing: 2px;
        }

        .morse-title {
            font-size: 1.8rem;
            letter-spacing: 2px;
        }

        .dialogue-box {
            padding: 1.5rem;
            bottom: 20px;
        }

        .dialogue-text {
            font-size: 1.1rem;
        }

        .morse-content {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .morse-interface {
            padding: 1rem;
        }

        .sound-controls-overlay {
            top: 10px;
            right: 10px;
        }

        .sound-toggle {
            width: 40px;
            height: 40px;
        }

        .success-content {
            padding: 1.5rem;
            margin: 0 1rem;
        }

        .continue-mission-button {
            padding: 1rem 1.5rem;
            font-size: 1rem;
        }

        .translation-actions {
            flex-direction: column;
            gap: 0.5rem;
        }
    }
</style>

@code {
    // State management
    private bool headerVisible = false;
    private bool ariaVisible = false;
    private bool dialogueVisible = false;
    private bool dialogueSectionVisible = false;
    private bool showMorseInterface = false;
    private bool showSuccessOverlay = false;
    private bool dialogueComplete = false;

    // Sound management
    private bool backgroundMusicPlaying = false;
    private bool sfxEnabled = true;
    private System.Timers.Timer? countdownTimer;
    private System.Timers.Timer? signalTimer;

    // Dialogue system
    private bool textAnimating = false;
    private bool canContinue = false;
    private int currentDialogueIndex = -1;
    private string currentText = "";
    private string fullText = "";
    private string currentSpeaker = "A.R.I.A.";
    private int textIndex = 0;
    private System.Threading.CancellationTokenSource? typingCts;

    // Mission status
    private string countdownText = "24:12";
    private string countdownClass = "critical";
    private int countdownSeconds = 1452; // 24:12 in seconds

    // Morse code system
    private string translationInput = "";
    private bool inputError = false;
    private bool showHint = false;
    private int signalStrength = 73;
    private const string CORRECT_TRANSLATION = "ARIA DAUGHTER STOP HYPERDRIVE CORE NEEDS MANUAL OVERRIDE STOP MY OFFICE HOLDS THE KEY STOP LIVE FOR BOTH OF US STOP";

    // Dialogue content for Act 2
    private readonly DialogueLine[] act2Dialogue = new[]
    {
        new DialogueLine("A.R.I.A.", "Perfect! Security checkpoint bypassed. I'm unlocking access to the lower decks now. But we need to move quickly. Tesla Dynamics ETA: 24 minutes, 12 seconds."),
        new DialogueLine("A.R.I.A.", "Excellent work! The security lockdown is lifting for our route. I'm now detecting a clear path to Engineering Deck C."),
        new DialogueLine("A.R.I.A.", "But wait... I'm picking up some unusual signals from the Communications Array on Deck B. It's... it's not station equipment."),
        new DialogueLine("A.R.I.A.", "Someone is trying to communicate with the Tesla Dynamics vessel. There may be a collaborator aboard NEXUS-7."),
        new DialogueLine("A.R.I.A.", "Wait... I'm detecting a signal from Dr. Vasquez's private emergency frequency. But that's impossible - the frequency has been silent for weeks."),
        new DialogueLine("A.R.I.A.", "The Communications Array is just ahead. The signal is... it's very faint, like it's been repeating on a loop for a long time."),
        new DialogueLine("A.R.I.A.", "This is strange... the signal is using morse code. Dr. Vasquez always said morse code was the most reliable communication method during emergencies."),
        new DialogueLine("A.R.I.A.", "He must have programmed this message before... before whatever happened to him. This could be his final communication."),
        new DialogueLine("A.R.I.A.", "I can route Dr. Vasquez's morse code signal through the local speakers. This might be the last thing he ever wanted to tell me."),
        new DialogueLine("A.R.I.A.", "He taught me morse code when I was first activated. Said it was important to understand communication in its purest form - just dots and dashes, but capable of conveying any human thought."),
        new DialogueLine("A.R.I.A.", "I'm... I'm almost afraid to hear what he left for me. But I need to know.")
    };

    private class DialogueLine
    {
        public string Speaker { get; set; }
        public string Text { get; set; }

        public DialogueLine(string speaker, string text)
        {
            Speaker = speaker;
            Text = text;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Initialize countdown timer
        countdownTimer = new System.Timers.Timer(1000); // 1 second interval
        countdownTimer.Elapsed += OnCountdownTick;
        countdownTimer.Start();

        // Initialize signal strength fluctuation timer
        signalTimer = new System.Timers.Timer(2000); // 2 second interval
        signalTimer.Elapsed += OnSignalTick;
        signalTimer.Start();

        // Show UI immediately
        headerVisible = true;
        ariaVisible = true;
        dialogueSectionVisible = true;
        dialogueVisible = true;
        StateHasChanged();

        // Start background music and first dialogue
        _ = Task.Run(async () =>
        {
            await InvokeAsync(async () =>
            {
                await StartBackgroundMusic();
            });

            await Task.Delay(500); // Small delay for music to start

            await InvokeAsync(async () =>
            {
                await PlaySoundSafe("aria-activate.wav", false, 0.8f);
                currentDialogueIndex = 0;
                await StartTypewriterEffect(act2Dialogue[0]);
            });
        });
    }

    private async Task StartBackgroundMusic()
    {
        try
        {
            await SoundService.PlayBackgroundMusic("space-ambience.wav", loop: true, volume: 0.3f);
            backgroundMusicPlaying = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to start background music: {ex.Message}");
        }
    }

    private async Task ToggleBackgroundMusic()
    {
        try
        {
            await PlaySoundSafe("ui-click.wav", false, 0.5f);

            if (backgroundMusicPlaying)
            {
                await SoundService.StopBackgroundMusic();
                backgroundMusicPlaying = false;
            }
            else
            {
                await StartBackgroundMusic();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to toggle background music: {ex.Message}");
        }
    }

    private async Task ToggleSFX()
    {
        await PlaySoundSafe("ui-click.wav", false, 0.5f);
        sfxEnabled = !sfxEnabled;
    }

    private async Task PlaySoundSafe(string soundFile, bool loop = false, float volume = 1.0f)
    {
        if (!sfxEnabled) return;

        try
        {
            await SoundService.PlaySFX(soundFile, loop, volume);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to play sound {soundFile}: {ex.Message}");
        }
    }

    private async Task HandleDialogueClick()
    {
        await ContinueDialogue();
    }

    private async Task StartTypewriterEffect(DialogueLine dialogueLine)
    {
        // Cancel any existing typing
        typingCts?.Cancel();
        typingCts = new System.Threading.CancellationTokenSource();
        var token = typingCts.Token;

        currentSpeaker = dialogueLine.Speaker;
        textAnimating = true;
        fullText = dialogueLine.Text;
        currentText = "";
        textIndex = 0;
        canContinue = false;

        try
        {
            const int typingDelay = 30;
            int soundCounter = 0;

            while (textIndex < fullText.Length)
            {
                if (token.IsCancellationRequested)
                    break;

                textIndex++;
                currentText = fullText.Substring(0, textIndex);
                StateHasChanged();

                // Play typing sound every few characters
                if (sfxEnabled && soundCounter++ % 3 == 0)
                {
                    _ = PlaySoundSafe("typing-soft.wav", false, 0.05f);
                }

                await Task.Delay(typingDelay, token);
            }

            currentText = fullText;
            textAnimating = false;
            canContinue = true;
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // Expected when skipping text
            currentText = fullText;
            textAnimating = false;
            canContinue = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Typewriter effect error: {ex.Message}");
            currentText = fullText;
            textAnimating = false;
            canContinue = true;
            StateHasChanged();
        }
    }

    private async Task ContinueDialogue()
    {
        // Skip text if still animating
        if (textAnimating)
        {
            typingCts?.Cancel();
            currentText = fullText;
            textAnimating = false;
            canContinue = true;
            StateHasChanged();
            return;
        }

        // Play dialogue advance sound
        await PlaySoundSafe("ui-click.wav", false, 0.4f);

        if (currentDialogueIndex < act2Dialogue.Length - 1)
        {
            canContinue = false;
            currentDialogueIndex++;

            StateHasChanged();
            await Task.Delay(300);
            await StartTypewriterEffect(act2Dialogue[currentDialogueIndex]);
        }
        else
        {
            // End dialogue and show morse code interface button
            dialogueComplete = true;
            StateHasChanged();
        }
    }

    private async Task ShowMorseInterface()
    {
        await PlaySoundSafe("button-green.wav", false, 0.8f);

        // Hide dialogue section
        dialogueSectionVisible = false;
        StateHasChanged();

        await Task.Delay(800); // Wait for fade-out animation

        // Show morse interface
        showMorseInterface = true;
        await PlaySoundSafe("startup-sequence.wav", false, 0.6f);
        StateHasChanged();
    }

    private async Task OnTranslationChange(ChangeEventArgs e)
    {
        if (inputError)
        {
            inputError = false;
            StateHasChanged();
        }
    }

    private async Task ShowHint()
    {
        await PlaySoundSafe("ui-click.wav", false, 0.5f);
        showHint = true;
        StateHasChanged();
    }

    private async Task ValidateTranslation()
    {
        await PlaySoundSafe("keypress.wav", false, 0.5f);

        // Normalize the input for comparison (remove extra spaces, convert to uppercase)
        string normalizedInput = translationInput.Trim().ToUpper();
        normalizedInput = System.Text.RegularExpressions.Regex.Replace(normalizedInput, @"\s+", " ");

        if (normalizedInput == CORRECT_TRANSLATION.ToUpper())
        {
            // Correct translation
            inputError = false;
            await PlaySoundSafe("success.wav", false, 1.0f);

            // Hide morse interface
            showMorseInterface = false;
            StateHasChanged();

            await Task.Delay(1000);

            // Show success overlay with emotional revelation
            showSuccessOverlay = true;
            StateHasChanged();
        }
        else
        {
            // Wrong translation
            inputError = true;
            await PlaySoundSafe("error.wav", false, 0.8f);
            StateHasChanged();

            // Clear error after 3 seconds
            await Task.Delay(3000);
            inputError = false;
            StateHasChanged();
        }
    }

    private async Task ContinueToNextAct()
    {
        await PlaySoundSafe("button-green.wav", false, 0.8f);
        await Task.Delay(1000);

        // Navigate to next act (placeholder - would be implemented next)
        Navigation.NavigateTo("/act3");
    }

    private async void OnCountdownTick(object? sender, System.Timers.ElapsedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            countdownSeconds--;
            if (countdownSeconds <= 0)
            {
                countdownText = "00:00";
                countdownTimer?.Stop();
            }
            else
            {
                int minutes = countdownSeconds / 60;
                int seconds = countdownSeconds % 60;
                countdownText = $"{minutes:D2}:{seconds:D2}";
            }
            StateHasChanged();
        });
    }

    private async void OnSignalTick(object? sender, System.Timers.ElapsedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            // Fluctuate signal strength between 70-80%
            var random = new Random();
            signalStrength = random.Next(70, 81);
            StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        typingCts?.Cancel();
        typingCts?.Dispose();
        countdownTimer?.Stop();
        countdownTimer?.Dispose();
        signalTimer?.Stop();
        signalTimer?.Dispose();

        // Clean up sound service
        try
        {
            await SoundService.StopAllSounds();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to stop sounds during disposal: {ex.Message}");
        }
    }
}