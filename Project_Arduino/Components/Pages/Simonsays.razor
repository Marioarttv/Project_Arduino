@page "/simonsays"
@using System.Timers
@inject ISoundService SoundService
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div class="game-container">
    <div class="game-header">
        <h1 class="game-title">SECURITY BYPASS</h1>
        <div class="game-subtitle">Neural Pattern Recognition Protocol</div>
        <div class="level-display">
            <div class="level-text">SECURITY LEVEL @currentLevel</div>
            <div class="level-progress">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: @(((currentLevel - 1) / 3.0f) * 100)%"></div>
                </div>
            </div>
        </div>
        <div class="status-display">
            @if (gameState == GameState.Waiting)
            {
                <div class="status-text ready">AWAITING ACTIVATION</div>
            }
            else if (gameState == GameState.PlayerTurn)
            {
                <div class="status-text input">INPUT SEQUENCE [@(currentPlayerIndex + 1)/@currentSequence.Count]</div>
            }
            else if (gameState == GameState.Success)
            {
                @if (currentLevel < 3)
                {
                    <div class="status-text success">LEVEL @currentLevel COMPLETE</div>
                }
                else
                {
                    <div class="status-text success">ALL SYSTEMS BYPASSED</div>
                }
            }
            else if (gameState == GameState.Failure)
            {
                <div class="status-text error">SECURITY BREACH - SYSTEM RESET</div>
            }
        </div>
    </div>

    <div class="game-board">
        <div class="color-grid">
            <button class="color-button red @(activeColor == "red" ? "active" : "")"
                    @onclick="() => HandleColorClick(0)"
                    disabled="@(gameState != GameState.PlayerTurn)">
                <div class="button-inner">
                    <div class="button-core"></div>
                </div>
            </button>

            <button class="color-button yellow @(activeColor == "yellow" ? "active" : "")"
                    @onclick="() => HandleColorClick(1)"
                    disabled="@(gameState != GameState.PlayerTurn)">
                <div class="button-inner">
                    <div class="button-core"></div>
                </div>
            </button>

            <button class="color-button green @(activeColor == "green" ? "active" : "")"
                    @onclick="() => HandleColorClick(2)"
                    disabled="@(gameState != GameState.PlayerTurn)">
                <div class="button-inner">
                    <div class="button-core"></div>
                </div>
            </button>

            <button class="color-button blue @(activeColor == "blue" ? "active" : "")"
                    @onclick="() => HandleColorClick(3)"
                    disabled="@(gameState != GameState.PlayerTurn)">
                <div class="button-inner">
                    <div class="button-core"></div>
                </div>
            </button>
        </div>
    </div>

    <div class="control-panel">
        @if (gameState == GameState.Waiting)
        {
            <button class="control-button start" @onclick="StartGame">
                <span class="button-text">ACTIVATE SECURITY BYPASS</span>
            </button>
        }
        else if (gameState == GameState.Success && currentLevel < 3)
        {
            <button class="control-button start" @onclick="NextLevel">
                <span class="button-text">PROCEED TO LEVEL @(currentLevel + 1)</span>
            </button>
        }
        else if (gameState == GameState.Failure)
        {
            <button class="control-button reset" @onclick="ResetGame">
                <span class="button-text">RESTART PROTOCOL</span>
            </button>
        }

        <!-- Sound Controls -->
        <div class="sound-controls">
            <button class="control-button sound" @onclick="ToggleBackgroundMusic">
                <span class="button-text">@(backgroundMusicPlaying ? "STOP MUSIC" : "PLAY MUSIC")</span>
            </button>
        </div>
    </div>

    @if (gameState == GameState.Success && currentLevel >= 3)
    {
        <div class="success-overlay">
            <div class="success-content">
                <div class="success-icon">âœ“</div>
                <div class="success-message">SECURITY BYPASSED</div>
                <div class="success-submessage">All neural patterns recognized successfully</div>
                <button class="access-office-button" @onclick="CompleteChallenge">
                    <span class="button-text">PROCEED TO SECURITY OFFICE A-2</span>
                    <div class="button-glow"></div>
                </button>
            </div>
        </div>
    }
</div>

<style>
    * {
        box-sizing: border-box;
    }

    body {
        margin: 0;
        padding: 0;
    }

    .game-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
        color: #00f5ff;
        font-family: 'Courier New', monospace;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px;
        position: relative;
        overflow: hidden;
    }

        .game-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 20% 80%, rgba(0, 245, 255, 0.1) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(255, 0, 150, 0.1) 0%, transparent 50%);
            pointer-events: none;
        }

    .game-header {
        text-align: center;
        margin-bottom: 40px;
        z-index: 2;
    }

    .game-title {
        font-size: 3.5rem;
        font-weight: bold;
        margin: 0;
        text-shadow: 0 0 20px #00f5ff, 0 0 40px #00f5ff;
        letter-spacing: 8px;
        animation: titlePulse 3s ease-in-out infinite;
    }

    .game-subtitle {
        font-size: 1rem;
        color: #888;
        margin-top: 10px;
        letter-spacing: 2px;
    }

    .level-display {
        margin: 20px 0;
        text-align: center;
    }

    .level-text {
        font-size: 1.3rem;
        font-weight: bold;
        color: #00ff88;
        margin-bottom: 10px;
        letter-spacing: 2px;
        text-shadow: 0 0 10px #00ff88;
    }

    .progress-bar {
        width: 300px;
        height: 8px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
        margin: 0 auto;
        overflow: hidden;
        border: 1px solid rgba(0, 245, 255, 0.3);
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #00ff88, #00f5ff);
        border-radius: 4px;
        transition: width 0.8s ease;
        box-shadow: 0 0 10px rgba(0, 255, 136, 0.5);
    }

    .status-display {
        margin-top: 20px;
        padding: 15px 30px;
        border: 2px solid #00f5ff;
        background: rgba(0, 245, 255, 0.1);
        border-radius: 25px;
        backdrop-filter: blur(10px);
    }

    .status-text {
        font-size: 1.2rem;
        font-weight: bold;
        letter-spacing: 2px;
    }

        .status-text.ready {
            color: #00ff88;
            text-shadow: 0 0 10px #00ff88;
        }

        .status-text.input {
            color: #00f5ff;
            text-shadow: 0 0 10px #00f5ff;
        }

        .status-text.success {
            color: #00ff00;
            text-shadow: 0 0 15px #00ff00;
        }

        .status-text.error {
            color: #ff0066;
            text-shadow: 0 0 15px #ff0066;
        }

    .game-board {
        z-index: 2;
    }

    .color-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        padding: 30px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 20px;
        border: 1px solid rgba(0, 245, 255, 0.3);
        backdrop-filter: blur(15px);
    }

    .color-button {
        width: 150px;
        height: 150px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        position: relative;
        transition: all 0.3s ease;
        transform: scale(1);
        outline: none;
    }

        .color-button:hover:not(:disabled) {
            transform: scale(1.05);
        }

        .color-button:disabled {
            cursor: not-allowed;
            opacity: 0.6;
        }

    .button-inner {
        width: 100%;
        height: 100%;
        border-radius: 20px;
        position: relative;
        overflow: hidden;
    }

    .button-core {
        width: 100%;
        height: 100%;
        border-radius: 20px;
        transition: all 0.3s ease;
    }

    .color-button.red .button-core {
        background: linear-gradient(135deg, #ff0066, #ff3388);
        box-shadow: 0 0 30px rgba(255, 0, 102, 0.5);
    }

    .color-button.yellow .button-core {
        background: linear-gradient(135deg, #ffaa00, #ffcc33);
        box-shadow: 0 0 30px rgba(255, 170, 0, 0.5);
    }

    .color-button.green .button-core {
        background: linear-gradient(135deg, #00ff88, #33ffaa);
        box-shadow: 0 0 30px rgba(0, 255, 136, 0.5);
    }

    .color-button.blue .button-core {
        background: linear-gradient(135deg, #0088ff, #33aaff);
        box-shadow: 0 0 30px rgba(0, 136, 255, 0.5);
    }

    .color-button.active .button-core {
        transform: scale(1.1);
        animation: buttonFlash 0.6s ease-in-out;
    }

    .color-button.red.active .button-core {
        box-shadow: 0 0 60px rgba(255, 0, 102, 1), 0 0 100px rgba(255, 0, 102, 0.8);
    }

    .color-button.yellow.active .button-core {
        box-shadow: 0 0 60px rgba(255, 170, 0, 1), 0 0 100px rgba(255, 170, 0, 0.8);
    }

    .color-button.green.active .button-core {
        box-shadow: 0 0 60px rgba(0, 255, 136, 1), 0 0 100px rgba(0, 255, 136, 0.8);
    }

    .color-button.blue.active .button-core {
        box-shadow: 0 0 60px rgba(0, 136, 255, 1), 0 0 100px rgba(0, 136, 255, 0.8);
    }

    .control-panel {
        margin-top: 40px;
        z-index: 2;
        display: flex;
        flex-direction: column;
        gap: 15px;
        align-items: center;
    }

    .control-button {
        padding: 15px 40px;
        background: linear-gradient(135deg, #00f5ff, #0088cc);
        border: none;
        border-radius: 30px;
        color: #000;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        letter-spacing: 1px;
        box-shadow: 0 5px 15px rgba(0, 245, 255, 0.3);
    }

        .control-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 245, 255, 0.5);
        }

        .control-button.reset {
            background: linear-gradient(135deg, #ff0066, #cc0044);
            color: white;
            box-shadow: 0 5px 15px rgba(255, 0, 102, 0.3);
        }

            .control-button.reset:hover {
                box-shadow: 0 8px 25px rgba(255, 0, 102, 0.5);
            }

        .control-button.complete {
            background: linear-gradient(135deg, #00ff88, #00cc66);
            color: #000;
            box-shadow: 0 5px 15px rgba(0, 255, 136, 0.3);
            animation: completePulse 2s ease-in-out infinite;
        }

            .control-button.complete:hover {
                box-shadow: 0 8px 25px rgba(0, 255, 136, 0.5);
            }

        .control-button.sound {
            background: linear-gradient(135deg, #9966ff, #6644cc);
            color: white;
            box-shadow: 0 5px 15px rgba(153, 102, 255, 0.3);
            font-size: 0.9rem;
            padding: 10px 30px;
        }

            .control-button.sound:hover {
                box-shadow: 0 8px 25px rgba(153, 102, 255, 0.5);
            }

    .sound-controls {
        margin-top: 10px;
    }

    .success-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        animation: fadeIn 0.5s ease;
    }

    .success-content {
        text-align: center;
        padding: 40px;
        background: linear-gradient(135deg, rgba(0, 255, 136, 0.2), rgba(0, 245, 255, 0.2));
        border: 2px solid #00ff88;
        border-radius: 20px;
        backdrop-filter: blur(20px);
    }

    .success-icon {
        font-size: 4rem;
        color: #00ff88;
        margin-bottom: 20px;
        text-shadow: 0 0 20px #00ff88;
        animation: successPulse 2s ease-in-out infinite;
    }

    .success-message {
        font-size: 2rem;
        font-weight: bold;
        color: #00ff88;
        margin-bottom: 10px;
        letter-spacing: 2px;
    }

    .success-submessage {
        font-size: 1rem;
        color: #888;
        letter-spacing: 1px;
        margin-bottom: 25px;
    }

    .access-office-button {
        background: linear-gradient(135deg, #00ff88, #00cc66);
        border: none;
        padding: 15px 30px;
        border-radius: 30px;
        color: #000;
        font-family: 'Courier New', monospace;
        font-weight: bold;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        letter-spacing: 1px;
        box-shadow: 0 5px 15px rgba(0, 255, 136, 0.4);
        position: relative;
        overflow: hidden;
        animation: accessButtonPulse 2s ease-in-out infinite;
    }

        .access-office-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.6);
        }

        .access-office-button .button-glow {
            position: absolute;
            top: 0;
            left: -150%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.3) 50%, rgba(255,255,255,0) 100%);
            transition: left 0.8s ease;
        }

        .access-office-button:hover .button-glow {
            left: 150%;
        }

    @@keyframes titlePulse {
        0%, 100% {
            text-shadow: 0 0 20px #00f5ff, 0 0 40px #00f5ff;
        }

        50% {
            text-shadow: 0 0 30px #00f5ff, 0 0 60px #00f5ff, 0 0 80px #00f5ff;
        }
    }

    @@keyframes buttonFlash {
        0% {
            transform: scale(1.1);
            opacity: 1;
        }

        50% {
            transform: scale(1.2);
            opacity: 0.8;
        }

        100% {
            transform: scale(1.1);
            opacity: 1;
        }
    }

    @@keyframes successPulse {
        0%, 100% {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(1.2);
            opacity: 0.8;
        }
    }

    @@keyframes completePulse {
        0%, 100% {
            box-shadow: 0 5px 15px rgba(0, 255, 136, 0.3);
        }

        50% {
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.6);
        }
    }

    @@keyframes accessButtonPulse {
        0%, 100% {
            box-shadow: 0 5px 15px rgba(0, 255, 136, 0.4);
        }

        50% {
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.7);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@media (max-width: 768px) {
        .game-title {
            font-size: 2.5rem;
            letter-spacing: 4px;
        }

        .color-button {
            width: 120px;
            height: 120px;
        }

        .color-grid {
            gap: 15px;
            padding: 20px;
        }

        .progress-bar {
            width: 250px;
        }
    }
</style>

@code {
    private enum GameState
    {
        Waiting,
        PlayerTurn,
        Success,
        Failure
    }

    private GameState gameState = GameState.Waiting;
    private int currentLevel = 1;
    private int currentPlayerIndex = 0;
    private string activeColor = "";
    private System.Timers.Timer resetTimer = new System.Timers.Timer();
    private bool backgroundMusicPlaying = false;

    private string[] colorNames = { "red", "yellow", "green", "blue" };

    // Level patterns
    private List<List<int>> levelSequences = new List<List<int>>
    {
        new List<int> { 0, 3, 1, 2 }, // Level 1: Red, Blue, Yellow, Green (4 inputs)
        new List<int> { 0, 1, 2, 3, 0, 2, 1 }, // Level 2: Red, Yellow, Green, Blue, Red, Green, Yellow (7 inputs)
        new List<int> { 2, 0, 3, 1, 2, 0, 1, 3, 2, 0 } // Level 3: Green, Red, Blue, Yellow, Green, Red, Yellow, Blue, Green, Red (10 inputs)
    };

    private List<int> currentSequence => levelSequences[currentLevel - 1];

    // Sound file names
    private string[] buttonSounds = { "button-red.wav", "button-yellow.wav", "button-green.wav", "button-blue.wav" };
    private string backgroundMusicFile = "LOOP_Recollection.wav";
    private string successSoundFile = "success.wav";
    private string failureSoundFile = "error.wav";
    private string startSoundFile = "startup.wav";

    protected override void OnInitialized()
    {
        resetTimer.Elapsed += OnResetTimerElapsed;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Start background music when component is first loaded
            await StartBackgroundMusic();
        }
    }

    private async Task StartBackgroundMusic()
    {
        try
        {
            await SoundService.PlayBackgroundMusic(backgroundMusicFile, loop: true, volume: 0.3f);
            backgroundMusicPlaying = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to start background music: {ex.Message}");
        }
    }

    private async Task ToggleBackgroundMusic()
    {
        try
        {
            if (backgroundMusicPlaying)
            {
                await SoundService.StopBackgroundMusic();
                backgroundMusicPlaying = false;
            }
            else
            {
                await StartBackgroundMusic();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to toggle background music: {ex.Message}");
        }
    }

    private async void StartGame()
    {
        gameState = GameState.PlayerTurn;
        currentPlayerIndex = 0;

        // Play startup sound
        try
        {
            await SoundService.PlaySFX(startSoundFile, loop: false, volume: 0.8f);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to play start sound: {ex.Message}");
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void NextLevel()
    {
        currentLevel++;
        gameState = GameState.PlayerTurn;
        currentPlayerIndex = 0;

        // Play level advancement sound
        try
        {
            await SoundService.PlaySFX(startSoundFile, loop: false, volume: 0.8f);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to play level sound: {ex.Message}");
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void CompleteChallenge()
    {
        // Navigate to the next act
        Navigation.NavigateTo("/act1-1");
    }

    private async void HandleColorClick(int colorIndex)
    {
        if (gameState != GameState.PlayerTurn) return;

        // Play button sound
        try
        {
            await SoundService.PlaySFX(buttonSounds[colorIndex], loop: false, volume: 0.6f);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to play button sound: {ex.Message}");
        }

        // Flash the clicked button
        activeColor = colorNames[colorIndex];
        await InvokeAsync(StateHasChanged);

        await Task.Delay(200);
        activeColor = "";
        await InvokeAsync(StateHasChanged);

        // Check if the color is correct
        if (colorIndex == currentSequence[currentPlayerIndex])
        {
            currentPlayerIndex++;

            if (currentPlayerIndex >= currentSequence.Count)
            {
                // Level complete!
                gameState = GameState.Success;

                // Play success sound
                try
                {
                    await SoundService.PlaySFX(successSoundFile, loop: false, volume: 1.0f);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to play success sound: {ex.Message}");
                }

                await InvokeAsync(StateHasChanged);
            }
        }
        else
        {
            // Failure - reset to level 1
            gameState = GameState.Failure;
            currentLevel = 1; // Reset to first level

            // Play failure sound
            try
            {
                await SoundService.PlaySFX(failureSoundFile, loop: false, volume: 0.8f);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to play failure sound: {ex.Message}");
            }

            await InvokeAsync(StateHasChanged);

            // Auto-reset after 3 seconds
            resetTimer.Interval = 3000;
            resetTimer.Start();
        }
    }

    private async void ResetGame()
    {
        resetTimer.Stop();
        gameState = GameState.Waiting;
        currentLevel = 1;
        currentPlayerIndex = 0;
        activeColor = "";
        await InvokeAsync(StateHasChanged);
    }

    private async void OnResetTimerElapsed(object sender, ElapsedEventArgs e)
    {
        resetTimer.Stop();
        ResetGame();
    }

    public async ValueTask DisposeAsync()
    {
        resetTimer?.Dispose();

        // Clean up sound service
        try
        {
            await SoundService.StopAllSounds();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to stop sounds during disposal: {ex.Message}");
        }
    }
}